{"version":3,"sources":["webpack:///./src/blocks/circuitpython/digital/generators.ts"],"names":["define","Python","block","code","variable_pin","Blockly","variableDB_","getName","getFieldValue","Variables","NAME_TYPE","text_pinno","valueToCode","ORDER_ATOMIC","text_direction","text_text"],"mappings":"gHAAc,SAAUA,EAAOC,GAG7BA,EAAO,oBAAsB,SAAUC,GACrC,MAAMC,EAAO,4BACb,OAAOA,GAGTF,EAAO,aAAe,SAASC,GAC7B,IAAIE,EAAeC,QAAQJ,OAAOK,YAAYC,QAAQL,EAAMM,cAAc,OAAQH,QAAQI,UAAUC,WAChGC,EAAaN,QAAQJ,OAAOW,YAAYV,EAAO,OAAQG,QAAQJ,OAAOY,eAC3E,GAEKV,EAAOC,EAAc,mBAAoBO,EAAY,MACzD,OAAOR,GAGTF,EAAO,gBAAkB,SAASC,GAChC,IAAIE,EAAeC,QAAQJ,OAAOK,YAAYC,QAAQL,EAAMM,cAAc,OAAQH,QAAQI,UAAUC,WAChGI,EAAiBT,QAAQJ,OAAOW,YAAYV,EAAO,OAAQG,QAAQJ,OAAOY,eAC/E,mBAEKV,EAAOC,EAAc,gBAAiBU,EAAgB,KAC1D,OAAOX,GAGTF,EAAO,QAAU,SAASC,GACxB,IAAIE,EAAeC,QAAQJ,OAAOK,YAAYC,QAAQL,EAAMM,cAAc,OAAQH,QAAQI,UAAUC,WAChGI,EAAiBT,QAAQJ,OAAOW,YAAYV,EAAO,OAAQG,QAAQJ,OAAOY,eAC/E,YAEKV,EAAOC,EAAc,WAAYU,EAAgB,KACrD,OAAOX,GAGTF,EAAO,YAAc,SAASC,GAC5B,IAAIE,EAAeC,QAAQJ,OAAOK,YAAYC,QAAQL,EAAMM,cAAc,OAAQH,QAAQI,UAAUC,WAChGK,EAAYV,QAAQJ,OAAOW,YAAYV,EAAO,OAAQG,QAAQJ,OAAOY,eAC1E,GAEKV,EAAOC,EAAc,YAAaW,EAAW,KACjD,OAAOZ,GAGTF,EAAO,WAAa,SAASC,GAC3B,IAAIE,EAAeC,QAAQJ,OAAOK,YAAYC,QAAQL,EAAMM,cAAc,OAAQH,QAAQI,UAAUC,WAEhGP,EAAOC,EAAa,SAExB,MAAO,CAACD,EAAME,QAAQJ,OAAOY,eAjDjC","file":"js/chunk-2d208106.a00083e7.js","sourcesContent":["export default function define(Python: Blockly.BlockGenerators) {\n\n\n  Python['import_digitalio'] = function (block) {\n    const code = 'from digitalio import *\\n';\n    return code;\n  };\n\n  Python['pinconfig'] = function(block) {\n    var variable_pin = Blockly.Python.variableDB_.getName(block.getFieldValue('pin'), Blockly.Variables.NAME_TYPE);\n    var text_pinno = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC)\n|| '';\n    // TODO: Assemble Python into code variable.\n    var code = variable_pin+ ' = DigitalInOut(' +text_pinno+ ')\\n';\n    return code;\n  };\n\n  Python['pindirection'] = function(block) {\n    var variable_pin = Blockly.Python.variableDB_.getName(block.getFieldValue('pin'), Blockly.Variables.NAME_TYPE);\n    var text_direction = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC)\n|| 'Direction.OUTPUT';\n    // TODO: Assemble Python into code variable.\n    var code = variable_pin+ '.direction = ' +text_direction+ '\\n';\n    return code;\n  };\n\n  Python['pull'] = function(block) {\n    var variable_pin = Blockly.Python.variableDB_.getName(block.getFieldValue('pin'), Blockly.Variables.NAME_TYPE);\n    var text_direction = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC)\n|| 'Pull.DOWN';\n    // TODO: Assemble Python into code variable.\n    var code = variable_pin+ '.pull = ' +text_direction+ '\\n';\n    return code;\n  };\n\n  Python['pinvalue'] = function(block) {\n    var variable_pin = Blockly.Python.variableDB_.getName(block.getFieldValue('pin'), Blockly.Variables.NAME_TYPE);\n    var text_text = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC)\n|| '';\n    // TODO: Assemble Python into code variable.\n    var code = variable_pin+ '.value = ' +text_text+ '\\n';\n    return code;\n  };\n\n  Python['valuein'] = function(block) {\n    var variable_pin = Blockly.Python.variableDB_.getName(block.getFieldValue('pin'), Blockly.Variables.NAME_TYPE);\n    // TODO: Assemble Python into code variable.\n    var code = variable_pin+'.value';\n    // TODO: Change ORDER_NONE to the correct strength.\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  };\n\n}\n"],"sourceRoot":""}