{"version":3,"sources":["webpack:///./src/blocks/circuitpython/dotstar/generators.ts"],"names":["define","Python","block","code","variable_led","Blockly","variableDB_","getName","getFieldValue","Variables","NAME_TYPE","text_input","valueToCode","ORDER_ATOMIC","text_brightness","variable_name","text_neonum","text_colour"],"mappings":"kHAAc,SAAUA,EAAOC,GAG7BA,EAAO,kBAAoB,SAAUC,GACnC,IAAIC,EAAO,4BACX,OAAOA,GAGTF,EAAO,cAAgB,SAASC,GAC9B,IAAIE,EAAeC,QAAQJ,OAAOK,YAAYC,QAAQL,EAAMM,cAAc,OAAQH,QAAQI,UAAUC,WAChGC,EAAaN,QAAQJ,OAAOW,YAAYV,EAAO,OAAQG,QAAQJ,OAAOY,eAC3E,GAEKV,EAAOC,EAAc,+BAAgCO,EAAY,MACrE,OAAOR,GAGTF,EAAO,WAAa,SAASC,GAC3B,IAAIE,EAAeC,QAAQJ,OAAOK,YAAYC,QAAQL,EAAMM,cAAc,OAAQH,QAAQI,UAAUC,WAChGC,EAAaN,QAAQJ,OAAOW,YAAYV,EAAO,OAAQG,QAAQJ,OAAOY,eAC3E,GAEKV,EAAOC,EAAc,SAAUO,EAAY,MAC/C,OAAOR,GAGTF,EAAO,gBAAkB,SAASC,GAChC,IAAIE,EAAeC,QAAQJ,OAAOK,YAAYC,QAAQL,EAAMM,cAAc,OAAQH,QAAQI,UAAUC,WAChGI,EAAkBT,QAAQJ,OAAOW,YAAYV,EAAO,OAAQG,QAAQJ,OAAOY,eAChF,GAEKV,EAAOC,EAAc,iBAAkBU,EAAiB,KAC5D,OAAOX,GAGTF,EAAO,SAAW,SAASC,GACzB,IAAIa,EAAgBV,QAAQJ,OAAOK,YAAYC,QAAQL,EAAMM,cAAc,OAAQH,QAAQI,UAAUC,WACjGM,EAAcX,QAAQJ,OAAOW,YAAYV,EAAO,QAASG,QAAQJ,OAAOY,eAC7E,GACCI,EAAcZ,QAAQJ,OAAOW,YAAYV,EAAO,QAASG,QAAQJ,OAAOY,eACzE,GAEKV,EAAOY,EAAe,IAAKC,EAAa,QAASC,EAAa,MAClE,OAAOd,GA3CX","file":"js/chunk-2d0c5236.00edb833.js","sourcesContent":["export default function define(Python: Blockly.BlockGenerators) {\n\n\n  Python['import_dotstar'] = function (block) {\n    let code = 'import adafruit_dotstar\\n';\n    return code;\n  };\n\n  Python['vardotstar'] = function(block) {\n    var variable_led = Blockly.Python.variableDB_.getName(block.getFieldValue('led'), Blockly.Variables.NAME_TYPE);\n    var text_input = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC)\n|| '';\n    // TODO: Assemble Python into code variable.\n    var code = variable_led+ ' = adafruit_dotstar.DotStar(' +text_input+ ')\\n';\n    return code;\n  };\n\n  Python['ledfill'] = function(block) {\n    var variable_led = Blockly.Python.variableDB_.getName(block.getFieldValue('led'), Blockly.Variables.NAME_TYPE);\n    var text_input = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC)\n|| '';\n    // TODO: Assemble Python into code variable.\n    var code = variable_led+ '.fill(' +text_input+ ')\\n';\n    return code;\n  };\n\n  Python['dsbrightness'] = function(block) {\n    var variable_led = Blockly.Python.variableDB_.getName(block.getFieldValue('led'), Blockly.Variables.NAME_TYPE);\n    var text_brightness = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC)\n|| '';\n    // TODO: Assemble Python into code variable.\n    var code = variable_led+ '.brightness = ' +text_brightness+ '\\n';\n    return code;\n  };\n\n  Python['dsvar'] = function(block) {\n    var variable_name = Blockly.Python.variableDB_.getName(block.getFieldValue('led'), Blockly.Variables.NAME_TYPE);\n    var text_neonum = Blockly.Python.valueToCode(block, 'text1', Blockly.Python.ORDER_ATOMIC)\n|| '';\nvar text_colour = Blockly.Python.valueToCode(block, 'text2', Blockly.Python.ORDER_ATOMIC)\n|| '';\n    // TODO: Assemble Python into code variable.\n    var code = variable_name+ '[' +text_neonum+ '] = (' +text_colour+ ')\\n';\n    return code;\n  };\n  \n}\n"],"sourceRoot":""}