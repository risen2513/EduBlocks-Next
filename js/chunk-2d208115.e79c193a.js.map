{"version":3,"sources":["webpack:///./src/blocks/python/loops/generators.ts"],"names":["define","Python","block","text_1","Blockly","valueToCode","ORDER_ATOMIC","branch","statementToCode","addLoopTrap","id","PASS","code","text_letter","text_no","text_x","text_y","variable_var","variableDB_","getName","getFieldValue","Variables","NAME_TYPE"],"mappings":"gHAAc,SAAUA,EAAOC,GAC7BA,EAAO,eAAiB,SAAUC,GAChC,IAAIC,EAASC,QAAQH,OAAOI,YAAYH,EAAO,OAAQE,QAAQH,OAAOK,cACtE,IAAIC,EAASH,QAAQH,OAAOO,gBAAgBN,EAAO,MACnDK,EAASH,QAAQH,OAAOQ,YAAYF,EAAQL,EAAMQ,KAAON,QAAQH,OAAOU,KACxE,MAAMC,EAAO,SAAWT,EAAS,MAAQI,EACzC,OAAOK,GAGTX,EAAO,UAAY,SAAUC,GAC3B,IAAIK,EAASH,QAAQH,OAAOO,gBAAgBN,EAAO,MACnDK,EAASH,QAAQH,OAAOQ,YAAYF,EAAQL,EAAMQ,KAAON,QAAQH,OAAOU,KACxE,MAAME,EAAcT,QAAQH,OAAOI,YAAYH,EAAO,SAAUE,QAAQH,OAAOK,cACzEQ,EAAUV,QAAQH,OAAOI,YAAYH,EAAO,KAAME,QAAQH,OAAOK,cAGjEM,EAAO,OAASC,EAAc,aAAeC,EAAU,OAASP,EACtE,OAAOK,GAGTX,EAAO,uBAAyB,SAAUC,GACxC,IAAIK,EAASH,QAAQH,OAAOO,gBAAgBN,EAAO,MACnDK,EAASH,QAAQH,OAAOQ,YAAYF,EAAQL,EAAMQ,KAAON,QAAQH,OAAOU,KACxE,MAAMI,EAASX,QAAQH,OAAOI,YAAYH,EAAO,IAAKE,QAAQH,OAAOK,cAC/DU,EAASZ,QAAQH,OAAOI,YAAYH,EAAO,IAAKE,QAAQH,OAAOK,cAG/DM,EAAO,OAASG,EAAS,OAASC,EAAS,MAAQT,EACzD,OAAOK,GAGTX,EAAO,aAAe,SAASC,GAE7B,IAAIU,EAAO,UACX,OAAOA,GAGTX,EAAO,YAAc,SAAUC,GAC7B,IAAIe,EAAeb,QAAQH,OAAOiB,YAAYC,QAAQjB,EAAMkB,cAAc,OAAQhB,QAAQiB,UAAUC,WAEhGV,EAAOK,EAEX,MAAO,CAACL,EAAMR,QAAQH,OAAOK,eA1CjC","file":"js/chunk-2d208115.e79c193a.js","sourcesContent":["export default function define(Python: Blockly.BlockGenerators) {\n  Python['webwhileout'] = function (block) {\n    var text_1 = Blockly.Python.valueToCode(block, 'cond', Blockly.Python.ORDER_ATOMIC);\n    let branch = Blockly.Python.statementToCode(block, 'DO');\n    branch = Blockly.Python.addLoopTrap(branch, block.id) || Blockly.Python.PASS;\n    const code = 'while ' + text_1 + ':\\n' + branch;\n    return code;\n  };\n\n  Python['webfor'] = function (block) {\n    let branch = Blockly.Python.statementToCode(block, 'DO');\n    branch = Blockly.Python.addLoopTrap(branch, block.id) || Blockly.Python.PASS;\n    const text_letter = Blockly.Python.valueToCode(block, 'letter', Blockly.Python.ORDER_ATOMIC);\n    const text_no = Blockly.Python.valueToCode(block, 'no', Blockly.Python.ORDER_ATOMIC);\n    // const statements_name = Blockly.Python.statementToCode(block, 'DO');\n    // TODO: Assemble Python into code variable.\n    const code = 'for ' + text_letter + ' in range(' + text_no + '):\\n' + branch;\n    return code;\n  };\n\n  Python['webadvancedforloops'] = function (block) {\n    let branch = Blockly.Python.statementToCode(block, 'DO');\n    branch = Blockly.Python.addLoopTrap(branch, block.id) || Blockly.Python.PASS;\n    const text_x = Blockly.Python.valueToCode(block, 'x', Blockly.Python.ORDER_ATOMIC)\n    const text_y = Blockly.Python.valueToCode(block, 'y', Blockly.Python.ORDER_ATOMIC)\n    // const statements_do = Blockly.Python.statementToCode(block, 'DO');\n    // TODO: Assemble Python into code variable.\n    const code = 'for ' + text_x + ' in ' + text_y + ':\\n' + branch;\n    return code;\n  };\n\n  Python['web_break'] = function(block) {\n    // TODO: Assemble Python into code variable.\n    var code = 'break\\n';\n    return code;\n  };\n\n  Python['loop_get'] = function (block) {\n    var variable_var = Blockly.Python.variableDB_.getName(block.getFieldValue('VAR'), Blockly.Variables.NAME_TYPE);\n    // TODO: Assemble Python into code variable.\n    var code = variable_var;\n    // TODO: Change ORDER_NONE to the correct strength.\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  };\n\n}\n"],"sourceRoot":""}