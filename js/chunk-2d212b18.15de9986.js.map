{"version":3,"sources":["webpack:///./src/blocks/circuitpython/basic/generators.ts"],"names":["define","Python","block","code","branch","Blockly","statementToCode","addLoopTrap","id","PASS","text_const","getFieldValue","valueToCode","ORDER_ATOMIC","text_this","dropdown_crocsigns","text_that","text_1","text_2","text_letter","text_no","text_x","text_y","text_return","text_def","text_params","text_sleeptime","text_print","value_name","value_text1","value_text2","text_v","dropdown_name","value_iftext","value_iftext2","text_stuff","value_first","text_choose","value_last","value_bool","text_text","variable_name","variableDB_","getName","Variables","NAME_TYPE","dropdown_bool","variable_var"],"mappings":"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","file":"js/chunk-2d212b18.15de9986.js","sourcesContent":["export default function define(Python: Blockly.BlockGenerators) {\n  Python['import_board'] = function (block) {\n    const code = 'import board\\n';\n    return code;\n  };\n\n  Python['events_start_here'] = function (block) {\n    const code = '# Start code here\\n';\n    return code;\n  };\n\n  Python['import_time'] = function (block) {\n    const code = 'import time\\n';\n    return code;\n  };\n\n  Python['pause_s'] = function (block) {\n    const code = 'pause()\\n';\n    return code;\n  };\n\n  Python['random'] = function (block) {\n    const code = 'import random\\n';\n    return code;\n  };\n\n  Python['while_true'] = function (block) {\n    let branch = Blockly.Python.statementToCode(block, 'DO');\n    branch = Blockly.Python.addLoopTrap(branch, block.id) || Blockly.Python.PASS;\n    return 'while True:\\n' + branch;\n  };\n\n  Python['pass'] = function (block) {\n    const code = 'pass \\n';\n    return code;\n  };\n\n  Python['if'] = function (block) {\n    const text_const = block.getFieldValue('var');\n    let branch = Blockly.Python.statementToCode(block, 'DO');\n    branch = Blockly.Python.addLoopTrap(branch, block.id) || Blockly.Python.PASS;\n    return 'if ' + text_const + ':\\n' + branch;\n  };\n\n  Python['class'] = function (block) {\n    const text_const = Blockly.Python.valueToCode(block, 'class', Blockly.Python.ORDER_ATOMIC);\n    let branch = Blockly.Python.statementToCode(block, 'DO');\n    branch = Blockly.Python.addLoopTrap(branch, block.id) || Blockly.Python.PASS;\n    return 'class ' + text_const + ':\\n' + branch;\n  };\n\n  Python['varprint'] = function (block) {\n    const text_const = Blockly.Python.valueToCode(block, 'var', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    const code = 'print(' + text_const + ')\\n';\n    return code;\n  };\n\n  Python['ifcroc'] = function (block) {\n    let branch = Blockly.Python.statementToCode(block, 'DO');\n    branch = Blockly.Python.addLoopTrap(branch, block.id) || Blockly.Python.PASS;\n    const text_this = block.getFieldValue('this');\n    const dropdown_crocsigns = block.getFieldValue('crocsigns');\n    const text_that = block.getFieldValue('that');\n    // const statements_name = Blockly.Python.statementToCode(block, 'DO');\n    // TODO: Assemble Python into code variable.\n    const code = 'if ' + text_this + ' ' + dropdown_crocsigns + ' ' + text_that + ':\\n' + branch;\n    return code;\n  };\n\n  Python['varminus'] = function (block) {\n    const text_1 = block.getFieldValue('1');\n    const text_2 = block.getFieldValue('2');\n    // TODO: Assemble Python into code variable.\n    const code = text_1 + ' -= ' + text_2 + '\\n';\n    return code;\n  };\n\n  Python['for'] = function (block) {\n    let branch = Blockly.Python.statementToCode(block, 'DO');\n    branch = Blockly.Python.addLoopTrap(branch, block.id) || Blockly.Python.PASS;\n    const text_letter = Blockly.Python.valueToCode(block, 'letter', Blockly.Python.ORDER_ATOMIC);\n    const text_no = Blockly.Python.valueToCode(block, 'no', Blockly.Python.ORDER_ATOMIC);\n    // const statements_name = Blockly.Python.statementToCode(block, 'DO');\n    // TODO: Assemble Python into code variable.\n    const code = 'for ' + text_letter + ' in range(' + text_no + '):\\n' + branch;\n    return code;\n  };\n\n  Python['advancedforloops'] = function (block) {\n    let branch = Blockly.Python.statementToCode(block, 'DO');\n    branch = Blockly.Python.addLoopTrap(branch, block.id) || Blockly.Python.PASS;\n    const text_x = Blockly.Python.valueToCode(block, 'x', Blockly.Python.ORDER_ATOMIC)\n    const text_y = Blockly.Python.valueToCode(block, 'y', Blockly.Python.ORDER_ATOMIC)\n    // const statements_do = Blockly.Python.statementToCode(block, 'DO');\n    // TODO: Assemble Python into code variable.\n    const code = 'for ' + text_x + ' in ' + text_y + ':\\n' + branch;\n    return code;\n  };\n\n  Python['ifequals'] = function (block) {\n    let branch = Blockly.Python.statementToCode(block, 'DO');\n    branch = Blockly.Python.addLoopTrap(branch, block.id) || Blockly.Python.PASS;\n    const text_this = block.getFieldValue('this');\n    const text_that = block.getFieldValue('that');\n    // const statements_do = Blockly.Python.statementToCode(block, 'DO');\n    // TODO: Assemble Python into code variable.\n    const code = 'if ' + text_this + ' == ' + text_that + ':\\n' + branch;\n    return code;\n  };\n\n  Python['importinputs'] = function (block) {\n    // TODO: Assemble Python into code variable.\n    const code = 'import inputs\\n';\n    return code;\n  };\n\n  Python['return2'] = function (block) {\n    const text_return = Blockly.Python.valueToCode(block, 'return', Blockly.Python.ORDER_ATOMIC)\n    // TODO: Assemble Python into code variable.\n    const code = 'return ' + text_return + '\\n';\n    return code;\n  };\n\n  Python['elif'] = function (block) {\n    const text_const = block.getFieldValue('var');\n    let branch = Blockly.Python.statementToCode(block, 'DO');\n    branch = Blockly.Python.addLoopTrap(branch, block.id) || Blockly.Python.PASS;\n    return 'elif ' + text_const + ':\\n' + branch;\n  };\n\n  Python['else'] = function (block) {\n    let branch = Blockly.Python.statementToCode(block, 'DO');\n    branch = Blockly.Python.addLoopTrap(branch, block.id) || Blockly.Python.PASS;\n    return 'else:\\n' + branch;\n  };\n\n  Python['try'] = function (block) {\n    let branch = Blockly.Python.statementToCode(block, 'DO');\n    branch = Blockly.Python.addLoopTrap(branch, block.id) || Blockly.Python.PASS;\n    return 'try:\\n' + branch;\n  };\n\n  Python['df'] = function (block) {\n    const text_def = Blockly.Python.valueToCode(block, 'def', Blockly.Python.ORDER_ATOMIC);\n    const text_params = Blockly.Python.valueToCode(block, 'params', Blockly.Python.ORDER_ATOMIC)\n    const code = text_def + '(' + text_params + ')\\n';\n    return code;\n  };\n\n  Python['whileout'] = function (block) {\n    var text_1 = Blockly.Python.valueToCode(block, 'cond', Blockly.Python.ORDER_ATOMIC)\n    || 'True';\n    let branch = Blockly.Python.statementToCode(block, 'DO');\n    branch = Blockly.Python.addLoopTrap(branch, block.id) || Blockly.Python.PASS;\n    const code = 'while ' + text_1 + ':\\n' + branch;\n    return code;\n  };\n\n  Python['time'] = function (block) {\n    // TODO: Assemble Python into code variable.\n    const code = 'import time\\n';\n    return code;\n  };\n\n  Python['import_math'] = function (block) {\n    const code = 'import math\\n';\n    return code;\n  };\n\n\n\n  Python['sleep'] = function (block) {\n    const text_sleeptime = block.getFieldValue('sleep');\n    const code = 'time.sleep(' + text_sleeptime + ')\\n';\n    return code;\n  };\n\n  Python['print'] = function (block) {\n    const text_print = Blockly.Python.valueToCode(block, 'print', Blockly.Python.ORDER_ATOMIC)\n    // TODO: Assemble Python into code variable.\n    const code = 'print(\"' + text_print + '\")\\n';\n    return code;\n  };\n\n  Python['sleepnew'] = function(block) {\n    var value_name = Blockly.Python.valueToCode(block, 'sleep', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = 'time.sleep(' +value_name+ ')\\n';\n    return code;\n  };\n\n  Python['printnew'] = function (block) {\n    var text_print = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC)\n    || 'Hello World';\n    // TODO: Assemble Python into code variable.\n    const code = 'print(\"' + text_print + '\")\\n';\n    return code;\n  };\n\n  Python['equalsblocknew'] = function(block) {\n    var value_text1 = Blockly.Python.valueToCode(block, 'text1', Blockly.Python.ORDER_ATOMIC);\n    var value_text2 = Blockly.Python.valueToCode(block, 'text2', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = value_text1+ ' = ' +value_text2+ '\\n';\n    return code;\n  };\n\n  Python['define'] = function (block) {\n    const text_1 = Blockly.Python.valueToCode(block, '1', Blockly.Python.ORDER_ATOMIC)\n    const text_2 = Blockly.Python.valueToCode(block, '2', Blockly.Python.ORDER_ATOMIC)\n    let branch = Blockly.Python.statementToCode(block, 'DO');\n    branch = Blockly.Python.addLoopTrap(branch, block.id) || Blockly.Python.PASS;\n    // const statements_name = Blockly.Python.statementToCode(block, 'NAME');\n    // TODO: Assemble Python into code variable.\n    const code = 'def ' + text_1 + '(' + text_2 + '):\\n' + branch;\n    return code;\n  };\n\n  Python['greater'] = function (block) {\n    const text_1 = block.getFieldValue('1');\n    const text_v = block.getFieldValue('v');\n    let branch = Blockly.Python.statementToCode(block, 'DO');\n    branch = Blockly.Python.addLoopTrap(branch, block.id) || Blockly.Python.PASS;\n    // TODO: Assemble Python into code variable.\n    const code = 'while ' + text_1 + ' > ' + text_v + ':\\n' + branch;\n    return code;\n  };\n\n  Python['buttonapressed'] = function (block) {\n    const dropdown_name = block.getFieldValue('NAME');\n    // TODO: Assemble Python into code variable.\n    const code = 'button_' + dropdown_name + '.is_pressed()';\n    // TODO: Change ORDER_NONE to the correct strength.\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  };\n\n  Python['ifinline'] = function (block) {\n    let branch = Blockly.Python.statementToCode(block, 'ifstate');\n    branch = Blockly.Python.addLoopTrap(branch, block.id) || Blockly.Python.PASS;\n    const value_iftext = Blockly.Python.valueToCode(block, 'iftext', Blockly.Python.ORDER_ATOMIC) || 'True';\n    const code = 'if ' + value_iftext + ':\\n' + branch;\n    return code;\n  };\n\n  Python['except'] = function (block) {\n    let branch = Blockly.Python.statementToCode(block, 'ifstate');\n    branch = Blockly.Python.addLoopTrap(branch, block.id) || Blockly.Python.PASS;\n    const value_iftext = Blockly.Python.valueToCode(block, 'iftext', Blockly.Python.ORDER_ATOMIC);\n    const code = 'except ' + value_iftext + ':\\n' + branch;\n    return code;\n  };\n\n  Python['with'] = function (block) {\n    let branch = Blockly.Python.statementToCode(block, 'ifstate');\n    branch = Blockly.Python.addLoopTrap(branch, block.id) || Blockly.Python.PASS;\n    const value_iftext = Blockly.Python.valueToCode(block, 'iftext', Blockly.Python.ORDER_ATOMIC);\n    const value_iftext2 = Blockly.Python.valueToCode(block, 'iftext2', Blockly.Python.ORDER_ATOMIC);\n    const code = 'with ' + value_iftext + ' as ' +value_iftext2+ ':\\n' + branch;\n    return code;\n  };\n\n  Python['typeanything'] = function(block) {\n    var text_stuff = Blockly.Python.valueToCode(block, 'stuff', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = text_stuff + '# your own code\\n';\n    return code;\n  };\n\n  Python['elifinline'] = function (block) {\n    let branch = Blockly.Python.statementToCode(block, 'ifstate');\n    branch = Blockly.Python.addLoopTrap(branch, block.id) || Blockly.Python.PASS;\n    const value_iftext = Blockly.Python.valueToCode(block, 'iftext', Blockly.Python.ORDER_ATOMIC);\n    // const statements_ifstate = Blockly.Python.statementToCode(block, 'ifstate');\n    // TODO: Assemble Python into code variable.\n    const code = 'elif ' + value_iftext + ':\\n' + branch;\n    return code;\n  };\n \n  Python['internal'] = function(block) {\n    var value_first = Blockly.Python.valueToCode(block, 'first', Blockly.Python.ORDER_ATOMIC);\n    var text_choose = block.getFieldValue('choose');\n    var value_last = Blockly.Python.valueToCode(block, 'last', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = value_first+ ' ' +text_choose+ ' ' +value_last;\n    // TODO: Change ORDER_NONE to the correct strength.\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  };\n  Python['andor'] = Python['internal'];\n\n  Python['not'] = function (block) {\n    var value_bool = Blockly.Python.valueToCode(block, 'bool', Blockly.Python.ORDER_ATOMIC);\n    const code = 'not ' +  value_bool;\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  };\n\n  Python['break'] = function (block) {\n    const code = 'break\\n ';\n    return code;\n  };\n\n  Python['textinline'] = function(block) {\n    var text_text = block.getFieldValue('text');\n    // TODO: Assemble Python into code variable.\n    var code = text_text;\n    // TODO: Change ORDER_NONE to the correct strength.\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  };\n\n  Python['stringinline'] = function(block) {\n    var text_text = block.getFieldValue('text');\n    // TODO: Assemble Python into code variable.\n    var code = '\"' + text_text + '\"';\n    // TODO: Change ORDER_NONE to the correct strength.\n    return [code, Blockly.Python.ORDER_ATOMIC];\n};\n\n  Python['sliderinline'] = function(block) {\n    var text_text = block.getFieldValue('slider');\n    // TODO: Assemble Python into code variable.\n    var code = text_text;\n    // TODO: Change ORDER_NONE to the correct strength.\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  };\n\n\n  Python['varinlines'] = function(block) {\n    var variable_name = Blockly.Python.variableDB_.getName(block.getFieldValue('var'), Blockly.Variables.NAME_TYPE);\n    var text_text = block.getFieldValue('NAME');\n    var value_name = Blockly.Python.valueToCode(block, 'value', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = variable_name + ' ' +text_text+ ' ' +value_name+ '\\n';\n    return code;\n  };\n\n  Python['boolstatus'] = function(block) {\n    var dropdown_bool = block.getFieldValue('bool');\n    var code = dropdown_bool;\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  };\n\n  Python['variables_get'] = function(block) {\n    var variable_var = Blockly.Python.variableDB_.getName(block.getFieldValue('VAR'), Blockly.Variables.NAME_TYPE);\n    // TODO: Assemble Python into code variable.\n    var code = variable_var;\n    // TODO: Change ORDER_NONE to the correct strength.\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  };\n\n  Python['variables_set'] = function(block) {\n    var variable_var = Blockly.Python.variableDB_.getName(block.getFieldValue('VAR'), Blockly.Variables.NAME_TYPE);\n    var value_name = Blockly.Python.valueToCode(block, 'varset', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = variable_var+ ' = ' +value_name+ '\\n';\n    return code;\n  };\n\n}\n"],"sourceRoot":""}