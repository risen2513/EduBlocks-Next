{"version":3,"sources":["webpack:///./src/blocks/python/processing/generators.ts"],"names":["define","Python","block","value_text","Blockly","valueToCode","ORDER_ATOMIC","code","dropdown_name","getFieldValue"],"mappings":"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","file":"js/chunk-2d230c65.8436ebbc.js","sourcesContent":["export default function define(Python: Blockly.BlockGenerators) {\n\n  Python['p_arc'] = function(block) {\n    var value_text = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = 'arc(' +value_text+ ')\\n';\n    return code;\n  };\n\n  Python['p_background'] = function(block) {\n    var value_text = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = 'background(' +value_text+ ')\\n';\n    return code;\n  };\n\n  Python['p_blue'] = function (block) {\n    var value_text = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = 'blue(' + value_text + ')';\n    // TODO: Change ORDER_NONE to the correct strength.\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  };\n\n  Python['p_green'] = function (block) {\n    var value_text = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = 'green(' + value_text + ')';\n    // TODO: Change ORDER_NONE to the correct strength.\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  };\n\n  Python['p_red'] = function (block) {\n    var value_text = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = 'red(' + value_text + ')';\n    // TODO: Change ORDER_NONE to the correct strength.\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  };\n\n  Python['p_colorMode'] = function(block) {\n    var value_text = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = 'colorMode(' +value_text+ ')\\n';\n    return code;\n  };\n\n  Python['p_ellipse'] = function(block) {\n    var value_text = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = 'ellipse(' +value_text+ ')\\n';\n    return code;\n  };\n\n  Python['p_ellipseMode'] = function(block) {\n    var value_text = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = 'ellipseMode(' +value_text+ ')\\n';\n    return code;\n  };\n\n  Python['p_exit'] = function(block) {\n    // TODO: Assemble Python into code variable.\n    var code = 'exit()\\n';\n    return code;\n  };\n\n  Python['p_fill'] = function(block) {\n    var value_text = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = 'fill(' +value_text+ ')\\n';\n    return code;\n  };\n\n  Python['p_colorMode'] = function(block) {\n    var value_text = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = 'colorMode(' +value_text+ ')\\n';\n    return code;\n  };\n\n  Python['p_framerate_set'] = function(block) {\n    var value_text = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = 'frameRate(' +value_text+ ')\\n';\n    return code;\n  };\n\n  Python['p_framrate_get'] = function (block) {\n    // TODO: Assemble Python into code variable.\n    var code = 'framerate';\n    // TODO: Change ORDER_NONE to the correct strength.\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  };\n\n  Python['p_line'] = function(block) {\n    var value_text = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = 'line(' +value_text+ ')\\n';\n    return code;\n  };\n\n  Python['p_loadPixels'] = function(block) {\n    var value_text = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = 'loadPixels(' +value_text+ ')\\n';\n    return code;\n  };\n\n  Python['p_loop'] = function(block) {\n    var value_text = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = 'loop(' +value_text+ ')\\n';\n    return code;\n  };\n\n  Python['p_noloop'] = function(block) {\n    var value_text = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = 'noloop(' +value_text+ ')\\n';\n    return code;\n  };\n\n  Python['p_nofill'] = function(block) {\n    var value_text = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = 'nofill(' +value_text+ ')\\n';\n    return code;\n  };\n\n  Python['p_nosmooth'] = function(block) {\n    var value_text = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = 'nosmooth(' +value_text+ ')\\n';\n    return code;\n  };\n\n  Python['p_smooth'] = function(block) {\n    var value_text = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = 'smooth(' +value_text+ ')\\n';\n    return code;\n  };\n\n  Python['p_point'] = function(block) {\n    var value_text = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = 'point(' +value_text+ ')\\n';\n    return code;\n  };\n\n  Python['p_quad'] = function(block) {\n    var value_text = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = 'quad(' +value_text+ ')\\n';\n    return code;\n  };\n\n  Python['p_rect'] = function(block) {\n    var value_text = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = 'rect(' +value_text+ ')\\n';\n    return code;\n  };\n\n  Python['p_rectmode'] = function(block) {\n    var value_text = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = 'rectmode(' +value_text+ ')\\n';\n    return code;\n  };\n\n  Python['p_rotate'] = function(block) {\n    var value_text = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = 'rotate(' +value_text+ ')\\n';\n    return code;\n  };\n\n  Python['p_run'] = function(block) {\n    // TODO: Assemble Python into code variable.\n    var code = 'run()\\n';\n    return code;\n  };\n\n  Python['p_scale'] = function(block) {\n    var value_text = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = 'scale(' +value_text+ ')\\n';\n    return code;\n  };\n\n  Python['p_set'] = function(block) {\n    var value_text = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = 'set(' +value_text+ ')\\n';\n    return code;\n  };\n\n  Python['p_size'] = function(block) {\n    var value_text = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = 'size(' +value_text+ ')\\n';\n    return code;\n  };\n\n  Python['p_stroke'] = function(block) {\n    var value_text = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = 'stroke(' +value_text+ ')\\n';\n    return code;\n  };\n\n  Python['p_nostroke'] = function(block) {\n    var value_text = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = 'noStroke(' +value_text+ ')\\n';\n    return code;\n  };\n\n  Python['p_stroke3'] = function(block) {\n    var dropdown_name = block.getFieldValue('NAME');\n    var value_text = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = 'stroke' +dropdown_name+ '(' +value_text+ ')\\n';\n    return code;\n  };\n\n  Python['p_text'] = function(block) {\n    var value_text = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = 'text(' +value_text+ ')\\n';\n    return code;\n  };\n\n  Python['p_translate'] = function(block) {\n    var value_text = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = 'translate(' +value_text+ ')\\n';\n    return code;\n  };\n\n  Python['p_triangle'] = function(block) {\n    var value_text = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = 'triangle(' +value_text+ ')\\n';\n    return code;\n  };\n\n}\n"],"sourceRoot":""}