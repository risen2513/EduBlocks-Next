{"version":3,"sources":["webpack:///./src/blocks/microbit/radio/generators.ts"],"names":["define","Python","block","text_send","getFieldValue","code","Blockly","valueToCode","ORDER_ATOMIC","text_conf","variable_incoming","variableDB_","getName","Variables","NAME_TYPE","text_sentitem","branch","statementToCode","addLoopTrap","id","PASS"],"mappings":"gHAAc,SAAUA,EAAOC,GAE7BA,EAAO,aAAe,SAAUC,GAC9B,IAAIC,EAAYD,EAAME,cAAc,QAChCC,EAAO,cAAgBF,EAAY,OACvC,OAAOE,GAGTJ,EAAO,gBAAkB,SAAUC,GACjC,IAAIC,EAAYG,QAAQL,OAAOM,YAAYL,EAAO,OAAQI,QAAQL,OAAOO,eACpE,OACDH,EAAO,cAAgBF,EAAY,OACvC,OAAOE,GAGTJ,EAAO,aAAe,SAAUC,GAC9B,IAAIO,EAAYP,EAAME,cAAc,QAChCC,EAAO,gBAAkBI,EAAY,OACzC,OAAOJ,GAGTJ,EAAO,gBAAkB,SAAUC,GACjC,IAAIO,EAAYH,QAAQL,OAAOM,YAAYL,EAAO,OAAQI,QAAQL,OAAOO,eACpE,OACDH,EAAO,gBAAkBI,EAAY,OACzC,OAAOJ,GAGTJ,EAAO,WAAa,SAAUC,GAC5B,IAAIG,EAAO,kBACX,OAAOA,GAGTJ,EAAO,WAAa,SAAUC,GAC5B,IAAIG,EAAO,eACX,OAAOA,GAGTJ,EAAO,WAAa,SAAUC,GAC5B,MAAMQ,EAAoBJ,QAAQL,OAAOU,YAAYC,QAAQV,EAAME,cAAc,YAAaE,QAAQO,UAAUC,WAE1GC,EAAgBb,EAAME,cAAc,YAC1C,IAAIY,EAASV,QAAQL,OAAOgB,gBAAgBf,EAAO,MAGnD,OAFAc,EAASV,QAAQL,OAAOiB,YAAYF,EAAQd,EAAMiB,KAAOb,QAAQL,OAAOmB,KAEjE,MAAQV,EAAoB,OAASK,EAAgB,MAAQC,GAGtEf,EAAO,YAAc,SAAUC,GAC7B,IAAIQ,EAAoBJ,QAAQL,OAAOU,YAAYC,QAAQV,EAAME,cAAc,YAAaE,QAAQO,UAAUC,WAE1GT,EAAOK,EAAoB,uBAC/B,OAAOL,GApDX","file":"js/chunk-2d22c8d4.b4a3ee04.js","sourcesContent":["export default function define(Python: Blockly.BlockGenerators) {\n\n  Python['radiosend'] = function (block) {\n    let text_send = block.getFieldValue('send');\n    let code = 'radio.send(' + text_send + ') \\n';\n    return code;\n  };\n\n  Python['radiosendnew'] = function (block) { \n    let text_send = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC)\n      || 'True';\n    let code = 'radio.send(' + text_send + ') \\n';\n    return code;\n  };\n\n  Python['radioconf'] = function (block) {\n    let text_conf = block.getFieldValue('conf');\n    let code = 'radio.config(' + text_conf + ') \\n';\n    return code;\n  };\n\n  Python['radioconfnew'] = function (block) {\n    let text_conf = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC)\n      || 'True';\n    let code = 'radio.config(' + text_conf + ') \\n';\n    return code;\n  };\n\n  Python['imradio'] = function (block) {\n    let code = 'import radio \\n';\n    return code;\n  };\n\n  Python['radioon'] = function (block) {\n    let code = 'radio.on()\\n';\n    return code;\n  };\n\n  Python['ifradio'] = function (block) {\n    const variable_incoming = Blockly.Python.variableDB_.getName(block.getFieldValue('incoming'), Blockly.Variables.NAME_TYPE);\n    // const statements_name = Blockly.Python.statementToCode(block, 'DO');\n    const text_sentitem = block.getFieldValue('sentitem');\n    let branch = Blockly.Python.statementToCode(block, 'DO');\n    branch = Blockly.Python.addLoopTrap(branch, block.id) || Blockly.Python.PASS;\n    // TODO: Assemble Python into code variable.\n    return 'if ' + variable_incoming + ' == ' + text_sentitem + ':\\n' + branch;\n  };\n\n  Python['incoming'] = function (block) {\n    let variable_incoming = Blockly.Python.variableDB_.getName(block.getFieldValue('incoming'), Blockly.Variables.NAME_TYPE);\n    // TODO: Assemble Python into code variable.\n    let code = variable_incoming + ' = radio.receive()\\n';\n    return code;\n  };\n}\n"],"sourceRoot":""}