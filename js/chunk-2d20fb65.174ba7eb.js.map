{"version":3,"sources":["webpack:///./src/blocks/python/graphs/generators.ts"],"names":["define","Python","block","variable_name","Blockly","variableDB_","getName","getFieldValue","Variables","NAME_TYPE","dropdown_charttypes","value_text","valueToCode","ORDER_ATOMIC","code","value_text1","value_name"],"mappings":"gHAAc,SAAUA,EAAOC,GAE7BA,EAAO,cAAgB,SAASC,GAC9B,IAAIC,EAAgBC,QAAQH,OAAOI,YAAYC,QAAQJ,EAAMK,cAAc,QAASH,QAAQI,UAAUC,WAClGC,EAAsBR,EAAMK,cAAc,cAC1CI,EAAaP,QAAQH,OAAOW,YAAYV,EAAO,OAAQE,QAAQH,OAAOY,cAEtEC,EAAOX,EAAgB,YAAaO,EAAqB,IAAKC,EAAY,MAC9E,OAAOG,GAGTb,EAAO,eAAiB,SAASC,GAC/B,IAAIC,EAAgBC,QAAQH,OAAOI,YAAYC,QAAQJ,EAAMK,cAAc,QAASH,QAAQI,UAAUC,WAClGE,EAAaP,QAAQH,OAAOW,YAAYV,EAAO,OAAQE,QAAQH,OAAOY,cAEtEC,EAAOX,EAAgB,YAAaQ,EAAY,KACpD,OAAOG,GAGTb,EAAO,aAAe,SAASC,GAC7B,IAAIC,EAAgBC,QAAQH,OAAOI,YAAYC,QAAQJ,EAAMK,cAAc,QAASH,QAAQI,UAAUC,WAClGE,EAAaP,QAAQH,OAAOW,YAAYV,EAAO,OAAQE,QAAQH,OAAOY,cACtEE,EAAcX,QAAQH,OAAOW,YAAYV,EAAO,QAASE,QAAQH,OAAOY,cAExEC,EAAOX,EAAe,QAASQ,EAAY,MAAOI,EAAa,OACnE,OAAOD,GAGTb,EAAO,iBAAmB,SAASC,GACjC,IAAIC,EAAgBC,QAAQH,OAAOI,YAAYC,QAAQJ,EAAMK,cAAc,QAASH,QAAQI,UAAUC,WAClGO,EAAaZ,QAAQH,OAAOW,YAAYV,EAAO,OAAQE,QAAQH,OAAOY,cAEtEC,EAAOX,EAAgB,eAAgBa,EAAY,KACvD,OAAOF,GAGTb,EAAO,gBAAkB,SAASC,GAChC,IAAIC,EAAgBC,QAAQH,OAAOI,YAAYC,QAAQJ,EAAMK,cAAc,QAASH,QAAQI,UAAUC,WAElGK,EAAOX,EAAe,cAC1B,OAAOW,GAxCX","file":"js/chunk-2d20fb65.174ba7eb.js","sourcesContent":["export default function define(Python: Blockly.BlockGenerators) {\n  \n  Python['chart_type'] = function(block) {\n    var variable_name = Blockly.Python.variableDB_.getName(block.getFieldValue('name'), Blockly.Variables.NAME_TYPE);\n    var dropdown_charttypes = block.getFieldValue('chartTypes');\n    var value_text = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = variable_name + ' = pygal.' +dropdown_charttypes+ '(' +value_text+ ')\\n';\n    return code;\n  };\n\n  Python['chart_title'] = function(block) {\n    var variable_name = Blockly.Python.variableDB_.getName(block.getFieldValue('name'), Blockly.Variables.NAME_TYPE);\n    var value_text = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = variable_name + '.title = ' +value_text+ '\\n';\n    return code;\n  };\n\n  Python['chart_add'] = function(block) {\n    var variable_name = Blockly.Python.variableDB_.getName(block.getFieldValue('name'), Blockly.Variables.NAME_TYPE);\n    var value_text = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    var value_text1 = Blockly.Python.valueToCode(block, 'text1', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = variable_name+ '.add(' +value_text+ ', [' +value_text1+ '])\\n';\n    return code;\n  };\n\n  Python['chart_xlabels'] = function(block) {\n    var variable_name = Blockly.Python.variableDB_.getName(block.getFieldValue('name'), Blockly.Variables.NAME_TYPE);\n    var value_name = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = variable_name + '.x_labels = ' +value_name+ '\\n';\n    return code;\n  };\n\n  Python['chart_render'] = function(block) {\n    var variable_name = Blockly.Python.variableDB_.getName(block.getFieldValue('name'), Blockly.Variables.NAME_TYPE);\n    // TODO: Assemble Python into code variable.\n    var code = variable_name+ '.render()\\n';\n    return code;\n  };\n}\n"],"sourceRoot":""}