{"version":3,"sources":["webpack:///./src/blocks/python/statements/generators.ts"],"names":["define","Python","block","value_name","Blockly","valueToCode","ORDER_ATOMIC","code","text_stuff","text_def","text_params","value_string","dropdown_upperlower","getFieldValue","text_print","text_const","value_bool","value_in1","dropdown_commadd","value_in2"],"mappings":"gHAAc,SAAUA,EAAOC,GAC7BA,EAAO,eAAiB,SAASC,GAC/B,IAAIC,EAAaC,QAAQH,OAAOI,YAAYH,EAAO,QAASE,QAAQH,OAAOK,cAEvEC,EAAO,cAAeJ,EAAY,MACtC,OAAOI,GAGTN,EAAO,mBAAqB,SAASC,GACnC,IAAIM,EAAaJ,QAAQH,OAAOI,YAAYH,EAAO,QAASE,QAAQH,OAAOK,cAEvEC,EAAOC,EAAa,oBACxB,OAAOD,GAGTN,EAAO,SAAW,SAAUC,GAC1B,MAAMO,EAAWL,QAAQH,OAAOI,YAAYH,EAAO,MAAOE,QAAQH,OAAOK,cACnEI,EAAcN,QAAQH,OAAOI,YAAYH,EAAO,SAAUE,QAAQH,OAAOK,cACzEC,EAAOE,EAAW,IAAMC,EAAc,MAC5C,OAAOH,GAGTN,EAAO,eAAiB,SAASC,GAC/B,IAAIS,EAAeP,QAAQH,OAAOI,YAAYH,EAAO,SAAUE,QAAQH,OAAOK,cAC1EM,EAAsBV,EAAMW,cAAc,cAE1CN,EAAOI,EAAe,IAAMC,EAAsB,KAEtD,MAAO,CAACL,EAAMH,QAAQH,OAAOK,eAG/BL,EAAO,WAAa,SAAUC,GAC5B,MAAMK,EAAO,UACb,OAAOA,GAGTN,EAAO,YAAc,SAASC,GAC5B,IAAIC,EAAaC,QAAQH,OAAOI,YAAYH,EAAO,OAAQE,QAAQH,OAAOK,cAEtEC,EAAO,IAAKJ,EAAY,IAE5B,MAAO,CAACI,EAAMH,QAAQH,OAAOK,eAG/BL,EAAO,eAAiB,SAAUC,GAChC,IAAIY,EAAaV,QAAQH,OAAOI,YAAYH,EAAO,OAAQE,QAAQH,OAAOK,cAE1E,MAAMC,EAAO,UAAYO,EAAa,OACtC,OAAOP,GAGTN,EAAO,UAAY,SAAUC,GAC3B,IAAIY,EAAaV,QAAQH,OAAOI,YAAYH,EAAO,OAAQE,QAAQH,OAAOK,cAE1E,MAAMC,EAAO,UAAYO,EAAa,KACtC,OAAOP,GAGTN,EAAO,eAAiB,SAAUC,GAChC,MAAMa,EAAaX,QAAQH,OAAOI,YAAYH,EAAO,MAAOE,QAAQH,OAAOK,cAErEC,EAAO,SAAWQ,EAAa,MACrC,OAAOR,GAGTN,EAAO,UAAY,SAAUC,GAC3B,IAAIc,EAAaZ,QAAQH,OAAOI,YAAYH,EAAO,OAAQE,QAAQH,OAAOK,cAC1E,MAAMC,EAAO,OAAUS,EAAY,IACnC,MAAO,CAACT,EAAMH,QAAQH,OAAOK,eAG/BL,EAAO,YAAc,SAASC,GAC5B,IAAIe,EAAYb,QAAQH,OAAOI,YAAYH,EAAO,MAAOE,QAAQH,OAAOK,cACpEY,EAAmBhB,EAAMW,cAAc,WACvCM,EAAYf,QAAQH,OAAOI,YAAYH,EAAO,MAAOE,QAAQH,OAAOK,cAEpEC,EAAOU,EAAYC,EAAmBC,EAE1C,MAAO,CAACZ,EAAMH,QAAQH,OAAOK,eAG/BL,EAAO,UAAY,SAAUC,GAC3B,IAAIc,EAAaZ,QAAQH,OAAOI,YAAYH,EAAO,OAAQE,QAAQH,OAAOK,cAC1E,MAAMC,EAAO,OAAUS,EAAY,IACnC,MAAO,CAACT,EAAMH,QAAQH,OAAOK,eAG/BL,EAAO,aAAe,SAASC,GAC7B,IAAIC,EAAaC,QAAQH,OAAOI,YAAYH,EAAO,OAAQE,QAAQH,OAAOK,cAEtEC,EAAO,SAAUJ,EAAY,IAEjC,MAAO,CAACI,EAAMH,QAAQH,OAAOK,eA5FjC","file":"js/chunk-2d22fd36.d6254176.js","sourcesContent":["export default function define(Python: Blockly.BlockGenerators) {\n  Python['websleepnew'] = function(block) {\n    var value_name = Blockly.Python.valueToCode(block, 'sleep', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = 'time.sleep(' +value_name+ ')\\n';\n    return code;\n  };\n\n  Python['webtypeanything'] = function(block) {\n    var text_stuff = Blockly.Python.valueToCode(block, 'stuff', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = text_stuff + '# your own code\\n';\n    return code;\n  };\n\n  Python['webdf'] = function (block) {\n    const text_def = Blockly.Python.valueToCode(block, 'def', Blockly.Python.ORDER_ATOMIC);\n    const text_params = Blockly.Python.valueToCode(block, 'params', Blockly.Python.ORDER_ATOMIC)\n    const code = text_def + '(' + text_params + ')\\n';\n    return code;\n  };\n\n  Python['upper_lower'] = function(block) {\n    var value_string = Blockly.Python.valueToCode(block, 'string', Blockly.Python.ORDER_ATOMIC);\n    var dropdown_upperlower = block.getFieldValue('upperlower');\n    // TODO: Assemble Python into code variable.\n    var code = value_string + '.' + dropdown_upperlower + '()';\n    // TODO: Change ORDER_NONE to the correct strength.\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  };\n\n  Python['webpass'] = function (block) {\n    const code = 'pass \\n';\n    return code;\n  };\n\n  Python['brackets'] = function(block) {\n    var value_name = Blockly.Python.valueToCode(block, 'NAME', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = '(' +value_name+ ')';\n    // TODO: Change ORDER_NONE to the correct strength.\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  };\n\n  Python['webprintnew'] = function (block) {\n    var text_print = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    const code = 'print(\"' + text_print + '\")\\n';\n    return code;\n  };\n\n  Python['global'] = function (block) {\n    var text_print = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    const code = 'global ' + text_print + '\\n';\n    return code;\n  };\n\n  Python['webvarprint'] = function (block) {\n    const text_const = Blockly.Python.valueToCode(block, 'var', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    const code = 'print(' + text_const + ')\\n';\n    return code;\n  };\n\n  Python['webint'] = function (block) {\n    var value_bool = Blockly.Python.valueToCode(block, 'bool', Blockly.Python.ORDER_ATOMIC);\n    const code = 'int(' +  value_bool+ ')';\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  };\n\n  Python['webcomma'] = function(block) {\n    var value_in1 = Blockly.Python.valueToCode(block, 'in1', Blockly.Python.ORDER_ATOMIC);\n    var dropdown_commadd = block.getFieldValue('commadd');\n    var value_in2 = Blockly.Python.valueToCode(block, 'in2', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = value_in1 + dropdown_commadd + value_in2;\n    // TODO: Change ORDER_NONE to the correct strength.\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  };\n\n  Python['webstr'] = function (block) {\n    var value_bool = Blockly.Python.valueToCode(block, 'bool', Blockly.Python.ORDER_ATOMIC);\n    const code = 'str(' +  value_bool+ ')';\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  };\n\n  Python['input_web'] = function(block) {\n    var value_name = Blockly.Python.valueToCode(block, 'NAME', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = 'input(' +value_name+ ')';\n    // TODO: Change ORDER_NONE to the correct strength.\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  };\n\n}\n"],"sourceRoot":""}