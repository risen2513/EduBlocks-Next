{"version":3,"sources":["webpack:///./src/blocks/python/random/definitions.ts"],"names":["define","Blocks","rand_col","init","this","appendDummyInput","appendField","appendValueInput","setCheck","setInputsInline","setOutput","setColour","setOutputShape","Blockly","OUTPUT_SHAPE_ROUND","setTooltip","setHelpUrl"],"mappings":"gHAAc,SAAUA,EAAOC,GAC7B,IAAIC,EAAW,UAEfD,EAAO,iBAAmB,CACxBE,KAAM,WACJC,KAAKC,mBACFC,YAAY,kBACfF,KAAKG,iBAAiB,QACnBC,SAAS,MACZJ,KAAKC,mBACFC,YAAY,KACfF,KAAKK,iBAAgB,GACrBL,KAAKM,WAAU,EAAM,MACrBN,KAAKO,UAAUT,GACfE,KAAKQ,eAAeC,QAAQC,oBAC5BV,KAAKW,WAAW,sDAChBX,KAAKY,WAAW,MAIpBf,EAAO,kBAAoB,CACzBE,KAAM,WACJC,KAAKC,mBACFC,YAAY,mBACfF,KAAKG,iBAAiB,QACnBC,SAAS,MACZJ,KAAKC,mBACFC,YAAY,KACfF,KAAKK,iBAAgB,GACrBL,KAAKM,WAAU,EAAM,MACrBN,KAAKO,UAAUT,GACfE,KAAKQ,eAAeC,QAAQC,oBAC5BV,KAAKW,WAAW,qEAChBX,KAAKY,WAAW,MAIpBf,EAAO,kBAAoB,CACzBE,KAAM,WACJC,KAAKC,mBACFC,YAAY,mBACfF,KAAKG,iBAAiB,QACnBC,SAAS,MACZJ,KAAKC,mBACFC,YAAY,KACfF,KAAKK,iBAAgB,GACrBL,KAAKM,WAAU,EAAM,MACrBN,KAAKO,UAAUT,GACfE,KAAKQ,eAAeC,QAAQC,oBAC5BV,KAAKW,WAAW,qEAChBX,KAAKY,WAAW,MAIpBf,EAAO,iBAAmB,CACxBE,KAAM,WACJC,KAAKC,mBACFC,YAAY,kBACfF,KAAKG,iBAAiB,QACnBC,SAAS,MACZJ,KAAKC,mBACFC,YAAY,KACfF,KAAKK,iBAAgB,GACrBL,KAAKM,WAAU,EAAM,MACrBN,KAAKO,UAAUT,GACfE,KAAKQ,eAAeC,QAAQC,oBAC5BV,KAAKW,WAAW,yCAChBX,KAAKY,WAAW,MAIpBf,EAAO,oBAAsB,CAC3BE,KAAM,WACJC,KAAKC,mBACFC,YAAY,qBACfF,KAAKG,iBAAiB,QACnBC,SAAS,MACZJ,KAAKC,mBACFC,YAAY,KACfF,KAAKK,iBAAgB,GACrBL,KAAKM,WAAU,EAAM,MACrBN,KAAKO,UAAUT,GACfE,KAAKQ,eAAeC,QAAQC,oBAC5BV,KAAKW,WAAW,yDAChBX,KAAKY,WAAW,MAIpBf,EAAO,eAAiB,CACtBE,KAAM,WACJC,KAAKC,mBACFC,YAAY,gBACfF,KAAKG,iBAAiB,QACnBC,SAAS,MACZJ,KAAKC,mBACFC,YAAY,KACfF,KAAKK,iBAAgB,GACrBL,KAAKM,WAAU,EAAM,MACrBN,KAAKO,UAAUT,GACfE,KAAKQ,eAAeC,QAAQC,oBAC5BV,KAAKW,WAAW,mDAChBX,KAAKY,WAAW,MAIpBf,EAAO,kBAAoB,CACzBE,KAAM,WACJC,KAAKC,mBACFC,YAAY,mBACfF,KAAKG,iBAAiB,QACnBC,SAAS,MACZJ,KAAKC,mBACFC,YAAY,KACfF,KAAKK,iBAAgB,GACrBL,KAAKM,WAAU,EAAM,MACrBN,KAAKO,UAAUT,GACfE,KAAKQ,eAAeC,QAAQC,oBAC5BV,KAAKW,WAAW,gBAChBX,KAAKY,WAAW,MAtHtB","file":"js/chunk-2d230521.e2a8afd9.js","sourcesContent":["export default function define(Blocks: Blockly.BlockDefinitions) {\n  let rand_col = \"#8BC248\"\n\n  Blocks['random_choice'] = {\n    init: function () {\n      this.appendDummyInput()\n        .appendField(\"random.choice(\");\n      this.appendValueInput(\"text\")\n        .setCheck(null);\n      this.appendDummyInput()\n        .appendField(\")\");\n      this.setInputsInline(true);\n      this.setOutput(true, null);\n      this.setColour(rand_col);\n      this.setOutputShape(Blockly.OUTPUT_SHAPE_ROUND);\n      this.setTooltip(\"Choose a random element from a non-empty sequence.\");\n      this.setHelpUrl(\"\");\n    }\n  };\n \n  Blocks['random_randint'] = {\n    init: function () {\n      this.appendDummyInput()\n        .appendField(\"random.randint(\");\n      this.appendValueInput(\"text\")\n        .setCheck(null);\n      this.appendDummyInput()\n        .appendField(\")\");\n      this.setInputsInline(true);\n      this.setOutput(true, null);\n      this.setColour(rand_col);\n      this.setOutputShape(Blockly.OUTPUT_SHAPE_ROUND);\n      this.setTooltip(\"Return random integer in range [a, b], including both end points.\");\n      this.setHelpUrl(\"\");\n    }\n  };\n\n  Blocks['random_uniform'] = {\n    init: function () {\n      this.appendDummyInput()\n        .appendField(\"random.uniform(\");\n      this.appendValueInput(\"text\")\n        .setCheck(null);\n      this.appendDummyInput()\n        .appendField(\")\");\n      this.setInputsInline(true);\n      this.setOutput(true, null);\n      this.setColour(rand_col);\n      this.setOutputShape(Blockly.OUTPUT_SHAPE_ROUND);\n      this.setTooltip(\"Return random decimal in range [a, b], including both end points.\");\n      this.setHelpUrl(\"\");\n    }\n  };\n\n  Blocks['random_random'] = {\n    init: function () {\n      this.appendDummyInput()\n        .appendField(\"random.random(\");\n      this.appendValueInput(\"text\")\n        .setCheck(null);\n      this.appendDummyInput()\n        .appendField(\")\");\n      this.setInputsInline(true);\n      this.setOutput(true, null);\n      this.setColour(rand_col);\n      this.setOutputShape(Blockly.OUTPUT_SHAPE_ROUND);\n      this.setTooltip(\"random() -> x in the interval [0, 1).\");\n      this.setHelpUrl(\"\");\n    }\n  };\n\n  Blocks['random_randrange'] = {\n    init: function () {\n      this.appendDummyInput()\n        .appendField(\"random.randrange(\");\n      this.appendValueInput(\"text\")\n        .setCheck(null);\n      this.appendDummyInput()\n        .appendField(\")\");\n      this.setInputsInline(true);\n      this.setOutput(true, null);\n      this.setColour(rand_col);\n      this.setOutputShape(Blockly.OUTPUT_SHAPE_ROUND);\n      this.setTooltip(\"Choose a random item from range(start, stop[, step]).\");\n      this.setHelpUrl(\"\");\n    }\n  };\n\n  Blocks['random_seed'] = {\n    init: function () {\n      this.appendDummyInput()\n        .appendField(\"random.seed(\");\n      this.appendValueInput(\"text\")\n        .setCheck(null);\n      this.appendDummyInput()\n        .appendField(\")\");\n      this.setInputsInline(true);\n      this.setOutput(true, null);\n      this.setColour(rand_col);\n      this.setOutputShape(Blockly.OUTPUT_SHAPE_ROUND);\n      this.setTooltip(\"Initialize internal state from hashable object.\");\n      this.setHelpUrl(\"\");\n    }\n  };\n\n  Blocks['random_shuffle'] = {\n    init: function () {\n      this.appendDummyInput()\n        .appendField(\"random.shuffle(\");\n      this.appendValueInput(\"text\")\n        .setCheck(null);\n      this.appendDummyInput()\n        .appendField(\")\");\n      this.setInputsInline(true);\n      this.setOutput(true, null);\n      this.setColour(rand_col);\n      this.setOutputShape(Blockly.OUTPUT_SHAPE_ROUND);\n      this.setTooltip(\"Shuffle list\");\n      this.setHelpUrl(\"\");\n    }\n  };\n\n}\n\n"],"sourceRoot":""}