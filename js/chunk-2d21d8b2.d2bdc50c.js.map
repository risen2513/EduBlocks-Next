{"version":3,"sources":["webpack:///./src/blocks/python/math/generators.ts"],"names":["define","Python","block","value_first","Blockly","valueToCode","ORDER_ATOMIC","text_choose","getFieldValue","value_last","code","value_text"],"mappings":"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","file":"js/chunk-2d21d8b2.d2bdc50c.js","sourcesContent":["export default function define(Python: Blockly.BlockGenerators) {\n  Python['operators2'] = function(block) {\n    var value_first = Blockly.Python.valueToCode(block, 'first', Blockly.Python.ORDER_ATOMIC);\n    var text_choose = block.getFieldValue('operators');\n    var value_last = Blockly.Python.valueToCode(block, 'last', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = value_first+ ' ' +text_choose+ ' ' +value_last;\n    // TODO: Change ORDER_NONE to the correct strength.\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  };\n\n  Python['math_acos'] = function (block) {\n    var value_text = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = 'math.acos(' + value_text + ')';\n    // TODO: Change ORDER_NONE to the correct strength.\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  };\n\n  Python['math_acosh'] = function (block) {\n    var value_text = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = 'math.acosh(' + value_text + ')';\n    // TODO: Change ORDER_NONE to the correct strength.\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  };\n\n  Python['math_asin'] = function (block) {\n    var value_text = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = 'math.asin(' + value_text + ')';\n    // TODO: Change ORDER_NONE to the correct strength.\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  };\n\n  Python['math_asinh'] = function (block) {\n    var value_text = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = 'math.asinh(' + value_text + ')';\n    // TODO: Change ORDER_NONE to the correct strength.\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  };\n\n  Python['math_atan'] = function (block) {\n    var value_text = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = 'math.atan(' + value_text + ')';\n    // TODO: Change ORDER_NONE to the correct strength.\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  };\n\n  Python['math_atanh'] = function (block) {\n    var value_text = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = 'math.atanh(' + value_text + ')';\n    // TODO: Change ORDER_NONE to the correct strength.\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  };\n\n  Python['math_ceil'] = function (block) {\n    var value_text = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = 'math.ceil(' + value_text + ')';\n    // TODO: Change ORDER_NONE to the correct strength.\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  };\n\n  Python['math_cos'] = function (block) {\n    var value_text = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = 'math.cos(' + value_text + ')';\n    // TODO: Change ORDER_NONE to the correct strength.\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  };\n\n  Python['math_cosh'] = function (block) {\n    var value_text = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = 'math.cosh(' + value_text + ')';\n    // TODO: Change ORDER_NONE to the correct strength.\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  };\n\n  Python['math_degrees'] = function (block) {\n    var value_text = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = 'math.degrees(' + value_text + ')';\n    // TODO: Change ORDER_NONE to the correct strength.\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  };\n\n  Python['math_radians'] = function (block) {\n    var value_text = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = 'math.radians(' + value_text + ')';\n    // TODO: Change ORDER_NONE to the correct strength.\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  };\n\n  Python['math_exp'] = function (block) {\n    var value_text = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = 'math.exp(' + value_text + ')';\n    // TODO: Change ORDER_NONE to the correct strength.\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  };\n\n  Python['math_fabs'] = function (block) {\n    var value_text = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = 'math.fabs(' + value_text + ')';\n    // TODO: Change ORDER_NONE to the correct strength.\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  };\n\n  Python['math_factorial'] = function (block) {\n    var value_text = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = 'math.factorial(' + value_text + ')';\n    // TODO: Change ORDER_NONE to the correct strength.\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  };\n\n  Python['math_floor'] = function (block) {\n    var value_text = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = 'math.floor(' + value_text + ')';\n    // TODO: Change ORDER_NONE to the correct strength.\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  };\n\n  Python['math_hypot'] = function (block) {\n    var value_text = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = 'math.hypot(' + value_text + ')';\n    // TODO: Change ORDER_NONE to the correct strength.\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  };\n\n  Python['math_log'] = function (block) {\n    var value_text = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = 'math.log(' + value_text + ')';\n    // TODO: Change ORDER_NONE to the correct strength.\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  };\n\n  Python['math_log10'] = function (block) {\n    var value_text = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = 'math.log10(' + value_text + ')';\n    // TODO: Change ORDER_NONE to the correct strength.\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  };\n\n  Python['math_pow'] = function (block) {\n    var value_text = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = 'math.pow(' + value_text + ')';\n    // TODO: Change ORDER_NONE to the correct strength.\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  };\n\n  Python['math_sin'] = function (block) {\n    var value_text = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = 'math.sin(' + value_text + ')';\n    // TODO: Change ORDER_NONE to the correct strength.\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  };\n\n  Python['math_sinh'] = function (block) {\n    var value_text = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = 'math.sinh(' + value_text + ')';\n    // TODO: Change ORDER_NONE to the correct strength.\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  };\n\n  Python['math_st'] = function (block) {\n    var value_text = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = 'math.sqrt(' + value_text + ')';\n    // TODO: Change ORDER_NONE to the correct strength.\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  };\n\n  Python['math_tan'] = function (block) {\n    var value_text = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = 'math.tan(' + value_text + ')';\n    // TODO: Change ORDER_NONE to the correct strength.\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  };\n\n  Python['math_tanh'] = function (block) {\n    var value_text = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = 'math.tanh(' + value_text + ')';\n    // TODO: Change ORDER_NONE to the correct strength.\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  };\n\n  Python['math_trunc'] = function (block) {\n    var value_text = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = 'math.trunc(' + value_text + ')';\n    // TODO: Change ORDER_NONE to the correct strength.\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  };\n}\n"],"sourceRoot":""}