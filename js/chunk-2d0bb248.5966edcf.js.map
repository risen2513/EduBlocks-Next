{"version":3,"sources":["webpack:///./src/blocks/python/turtle/definitions.ts"],"names":["define","Blocks","init","this","appendDummyInput","appendField","setPreviousStatement","setNextStatement","setColour","setTooltip","setHelpUrl","Blockly","FieldVariable","appendValueInput","setCheck","FieldDropdown"],"mappings":"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","file":"js/chunk-2d0bb248.5966edcf.js","sourcesContent":["export default function define(Blocks: Blockly.BlockDefinitions) {\n  Blocks['import_turtle'] = {\n    init: function () {\n      this.appendDummyInput()\n        .appendField(\"from turtle import *\");\n      this.setPreviousStatement(true, null);\n      this.setNextStatement(true, null);\n      this.setColour(240);\n      this.setTooltip(\"Import Turtle library\");\n      this.setHelpUrl(\"\");\n    }\n  };\n\n  Blocks['turtle'] = {\n    init: function () {\n      this.appendDummyInput()\n        .appendField(new Blockly.FieldVariable(\"turtle\"), \"turtle\")\n        .appendField(\" = Turtle()\");\n      this.setPreviousStatement(true, null);\n      this.setNextStatement(true, null);\n      this.setColour(240);\n      this.setTooltip(\"Initialize the turtle\");\n      this.setHelpUrl(\"\");\n    }\n  };\n\n  Blocks['screeninit'] = {\n    init: function () {\n      this.appendDummyInput()\n        .appendField(new Blockly.FieldVariable(\"screen\"), \"wn\")\n        .appendField(\" = Screen()\");\n      this.setPreviousStatement(true, null);\n      this.setNextStatement(true, null);\n      this.setColour(240);\n      this.setTooltip(\"Initialize the Turtle screen\");\n      this.setHelpUrl(\"\");\n    }\n  };\n\n  Blocks['background'] = {\n    init: function () {\n      this.appendDummyInput()\n        .appendField(new Blockly.FieldVariable(\"screen\"), \"wn\")\n        .appendField(\".bgcolour(\")\n      this.appendValueInput('text')\n        .setCheck(null);\n      this.appendDummyInput()\n        .appendField(\")\");\n      this.setPreviousStatement(true, null);\n      this.setNextStatement(true, null);\n      this.setColour(240);\n      this.setTooltip(\"Change the background\");\n      this.setHelpUrl(\"\");\n    }\n  };\n\n  Blocks['directions'] = {\n    init: function () {\n      this.appendDummyInput()\n        .appendField(new Blockly.FieldVariable(\"turtle\"), \"turtle\")\n        .appendField(\".\")\n        .appendField(new Blockly.FieldDropdown([[\"forward\", \"forward\"], [\"left\", \"left\"], [\"right\", \"right\"], [\"backward\", \"backward\"]]), \"options\")\n        .appendField(\"(\")\n      this.appendValueInput('text')\n        .setCheck(null);\n      this.appendDummyInput()\n        .appendField(\")\");\n      this.setPreviousStatement(true, null);\n      this.setNextStatement(true, null);\n      this.setColour(240);\n      this.setTooltip(\"Make the turtle move\");\n      this.setHelpUrl(\"\");\n    }\n  };\n\n  Blocks['penud'] = {\n    init: function () {\n      this.appendDummyInput()\n        .appendField(new Blockly.FieldVariable(\"turtle\"), \"turtle\")\n        .appendField(\".pen\")\n        .appendField(new Blockly.FieldDropdown([[\"up\", \"up\"], [\"down\", \"down\"]]), \"options\")\n        .appendField(\"()\");\n      this.setPreviousStatement(true, null);\n      this.setNextStatement(true, null);\n      this.setColour(240);\n      this.setTooltip(\"Pen up and down\");\n      this.setHelpUrl(\"\");\n    }\n  };\n\n  Blocks['pen'] = {\n    init: function () {\n      this.appendDummyInput()\n        .appendField(new Blockly.FieldVariable(\"turtle\"), \"turtle\")\n        .appendField(\".pen()\");\n      this.setPreviousStatement(true, null);\n      this.setNextStatement(true, null);\n      this.setColour(240);\n      this.setTooltip(\"Initialize the pen\");\n      this.setHelpUrl(\"\");\n    }\n  };\n\n  Blocks['colourpen'] = {\n    init: function () {\n      this.appendDummyInput()\n        .appendField(new Blockly.FieldVariable(\"turtle\"), \"turtle\")\n        .appendField(\".pencolor(\")\n      this.appendValueInput('text')\n        .setCheck(null);\n      this.appendDummyInput()\n        .appendField(\")\");\n      this.setPreviousStatement(true, null);\n      this.setNextStatement(true, null);\n      this.setColour(240);\n      this.setTooltip(\"Change the colour\");\n      this.setHelpUrl(\"\");\n    }\n  };\n\n  Blocks['colour'] = {\n    init: function () {\n      this.appendDummyInput()\n        .appendField(new Blockly.FieldVariable(\"turtle\"), \"turtle\")\n        .appendField(\".color(\")\n      this.appendValueInput('text')\n        .setCheck(null);\n      this.appendDummyInput()\n        .appendField(\")\");\n      this.setPreviousStatement(true, null);\n      this.setNextStatement(true, null);\n      this.setColour(240);\n      this.setTooltip(\"Change the colour\");\n      this.setHelpUrl(\"\");\n    }\n  };\n\n  Blocks['colourmode'] = {\n    init: function () {\n      this.appendDummyInput()\n        .appendField(new Blockly.FieldVariable(\"screen\"), \"wn\")\n        .appendField(\".colormode(\")\n      this.appendValueInput('text')\n        .setCheck(null);\n      this.appendDummyInput()\n        .appendField(\")\");\n      this.setPreviousStatement(true, null);\n      this.setNextStatement(true, null);\n      this.setColour(240);\n      this.setTooltip(\"Change the colourmode\");\n      this.setHelpUrl(\"\");\n    }\n  };\n\n  Blocks['penwidth'] = {\n    init: function () {\n      this.appendDummyInput()\n        .appendField(new Blockly.FieldVariable(\"turtle\"), \"turtle\")\n        .appendField(\".width(\")\n      this.appendValueInput('text')\n        .setCheck(null);\n      this.appendDummyInput()\n        .appendField(\")\");\n      this.setPreviousStatement(true, null);\n      this.setNextStatement(true, null);\n      this.setColour(240);\n      this.setTooltip(\"Change the width\");\n      this.setHelpUrl(\"\");\n    }\n  };\n  \n  Blocks['turtlespeed'] = {\n    init: function () {\n      this.appendDummyInput()\n        .appendField(new Blockly.FieldVariable(\"turtle\"), \"turtle\")\n        .appendField(\".speed(\")\n      this.appendValueInput('text')\n        .setCheck(null);\n      this.appendDummyInput()\n        .appendField(\")\");\n      this.setPreviousStatement(true, null);\n      this.setNextStatement(true, null);\n      this.setColour(240);\n      this.setTooltip(\"Change the speed\");\n      this.setHelpUrl(\"\");\n    }\n  };\n\n  Blocks['turtleshape'] = {\n    init: function () {\n      this.appendDummyInput()\n        .appendField(new Blockly.FieldVariable(\"turtle\"), \"turtle\")\n        .appendField(\".shape(\")\n      this.appendValueInput('text')\n        .setCheck(null);\n      this.appendDummyInput()\n        .appendField(\")\");\n      this.setPreviousStatement(true, null);\n      this.setNextStatement(true, null);\n      this.setColour(240);\n      this.setTooltip(\"Change the shape\");\n      this.setHelpUrl(\"\");\n    }\n  };\n\n  Blocks['circle'] = {\n    init: function () {\n      this.appendDummyInput()\n        .appendField(new Blockly.FieldVariable(\"turtle\"), \"turtle\")\n        .appendField(\".circle(\")\n      this.appendValueInput('text')\n        .setCheck(null);\n      this.appendDummyInput()\n        .appendField(\")\");\n      this.setPreviousStatement(true, null);\n      this.setNextStatement(true, null);\n      this.setColour(240);\n      this.setTooltip(\"Draw a circle\");\n      this.setHelpUrl(\"\");\n    }\n  };\n\n  Blocks['goto'] = {\n    init: function () {\n      this.appendDummyInput()\n        .appendField(new Blockly.FieldVariable(\"turtle\"), \"turtle\")\n        .appendField(\".goto(\")\n      this.appendValueInput('text')\n        .setCheck(null);\n      this.appendDummyInput()\n        .appendField(\")\");\n      this.setPreviousStatement(true, null);\n      this.setNextStatement(true, null);\n      this.setColour(240);\n      this.setTooltip(\"go to x&y\");\n      this.setHelpUrl(\"\");\n    }\n  };\n}\n"],"sourceRoot":""}