{"version":3,"sources":["webpack:///./src/blocks/microbit/basic/generators.ts"],"names":["define","Python","block","code","value_in1","Blockly","valueToCode","ORDER_ATOMIC","dropdown_commadd","getFieldValue","value_in2","branch","statementToCode","addLoopTrap","id","PASS","text_const","text_this","dropdown_crocsigns","text_that","text_1","text_2","text_letter","text_no","text_x","text_y","text_return","text_def","text_params","text_sleeptime","text_print","value_name","value_text1","value_text2","text_v","dropdown_name","value_iftext","text_stuff","value_first","text_choose","value_last","value_bool","text_text","variable_name","variableDB_","getName","Variables","NAME_TYPE","dropdown_bool","variable_var"],"mappings":"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","file":"js/chunk-2d22cc04.c52164cc.js","sourcesContent":["export default function define(Python: Blockly.BlockGenerators) {\n  Python['import_microbit'] = function (block) {\n    const code = 'from microbit import *\\n';\n    return code;\n  };\n\n  Python['events_start_here'] = function (block) {\n    const code = '# Start code here\\n';\n    return code;\n  };\n\n  Python['import_signal'] = function (block) {\n    const code = 'from signal import pause\\n';\n    return code;\n  };\n\n  Python['import_utime'] = function (block) {\n    const code = 'import utime\\n';\n    return code;\n  };\n\n  Python['comma'] = function(block) {\n    var value_in1 = Blockly.Python.valueToCode(block, 'in1', Blockly.Python.ORDER_ATOMIC);\n    var dropdown_commadd = block.getFieldValue('commadd');\n    var value_in2 = Blockly.Python.valueToCode(block, 'in2', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = value_in1 + dropdown_commadd + value_in2;\n    // TODO: Change ORDER_NONE to the correct strength.\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  };\n\n  Python['pause_s'] = function (block) {\n    const code = 'pause()\\n';\n    return code;\n  };\n\n  Python['random'] = function (block) {\n    const code = 'import random\\n';\n    return code;\n  };\n\n  Python['while_true'] = function (block) {\n    let branch = Blockly.Python.statementToCode(block, 'DO');\n    branch = Blockly.Python.addLoopTrap(branch, block.id) || Blockly.Python.PASS;\n    return 'while True:\\n' + branch;\n  };\n\n  Python['pass'] = function (block) {\n    const code = 'pass \\n';\n    return code;\n  };\n\n  Python['if'] = function (block) {\n    const text_const = block.getFieldValue('var');\n    let branch = Blockly.Python.statementToCode(block, 'DO');\n    branch = Blockly.Python.addLoopTrap(branch, block.id) || Blockly.Python.PASS;\n    return 'if ' + text_const + ':\\n' + branch;\n  };\n\n  Python['class'] = function (block) {\n    const text_const = Blockly.Python.valueToCode(block, 'class', Blockly.Python.ORDER_ATOMIC);\n    let branch = Blockly.Python.statementToCode(block, 'DO');\n    branch = Blockly.Python.addLoopTrap(branch, block.id) || Blockly.Python.PASS;\n    return 'class ' + text_const + ':\\n' + branch;\n  };\n\n  Python['varprint'] = function (block) {\n    const text_const = Blockly.Python.valueToCode(block, 'var', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    const code = 'print(' + text_const + ')\\n';\n    return code;\n  };\n\n  Python['ifcroc'] = function (block) {\n    let branch = Blockly.Python.statementToCode(block, 'DO');\n    branch = Blockly.Python.addLoopTrap(branch, block.id) || Blockly.Python.PASS;\n    const text_this = block.getFieldValue('this');\n    const dropdown_crocsigns = block.getFieldValue('crocsigns');\n    const text_that = block.getFieldValue('that');\n    // const statements_name = Blockly.Python.statementToCode(block, 'DO');\n    // TODO: Assemble Python into code variable.\n    const code = 'if ' + text_this + ' ' + dropdown_crocsigns + ' ' + text_that + ':\\n' + branch;\n    return code;\n  };\n\n  Python['varminus'] = function (block) {\n    const text_1 = block.getFieldValue('1');\n    const text_2 = block.getFieldValue('2');\n    // TODO: Assemble Python into code variable.\n    const code = text_1 + ' -= ' + text_2 + '\\n';\n    return code;\n  };\n\n  Python['for'] = function (block) {\n    let branch = Blockly.Python.statementToCode(block, 'DO');\n    branch = Blockly.Python.addLoopTrap(branch, block.id) || Blockly.Python.PASS;\n    const text_letter = Blockly.Python.valueToCode(block, 'letter', Blockly.Python.ORDER_ATOMIC);\n    const text_no = Blockly.Python.valueToCode(block, 'no', Blockly.Python.ORDER_ATOMIC);\n    // const statements_name = Blockly.Python.statementToCode(block, 'DO');\n    // TODO: Assemble Python into code variable.\n    const code = 'for ' + text_letter + ' in range(' + text_no + '):\\n' + branch;\n    return code;\n  };\n\n  Python['advancedforloops'] = function (block) {\n    let branch = Blockly.Python.statementToCode(block, 'DO');\n    branch = Blockly.Python.addLoopTrap(branch, block.id) || Blockly.Python.PASS;\n    const text_x = Blockly.Python.valueToCode(block, 'x', Blockly.Python.ORDER_ATOMIC)\n    const text_y = Blockly.Python.valueToCode(block, 'y', Blockly.Python.ORDER_ATOMIC)\n    // const statements_do = Blockly.Python.statementToCode(block, 'DO');\n    // TODO: Assemble Python into code variable.\n    const code = 'for ' + text_x + ' in ' + text_y + ':\\n' + branch;\n    return code;\n  };\n\n  Python['ifequals'] = function (block) {\n    let branch = Blockly.Python.statementToCode(block, 'DO');\n    branch = Blockly.Python.addLoopTrap(branch, block.id) || Blockly.Python.PASS;\n    const text_this = block.getFieldValue('this');\n    const text_that = block.getFieldValue('that');\n    // const statements_do = Blockly.Python.statementToCode(block, 'DO');\n    // TODO: Assemble Python into code variable.\n    const code = 'if ' + text_this + ' == ' + text_that + ':\\n' + branch;\n    return code;\n  };\n\n  Python['importinputs'] = function (block) {\n    // TODO: Assemble Python into code variable.\n    const code = 'import inputs\\n';\n    return code;\n  };\n\n  Python['return2'] = function (block) {\n    const text_return = Blockly.Python.valueToCode(block, 'return', Blockly.Python.ORDER_ATOMIC)\n    // TODO: Assemble Python into code variable.\n    const code = 'return ' + text_return + '\\n';\n    return code;\n  };\n\n  Python['elif'] = function (block) {\n    const text_const = block.getFieldValue('var');\n    let branch = Blockly.Python.statementToCode(block, 'DO');\n    branch = Blockly.Python.addLoopTrap(branch, block.id) || Blockly.Python.PASS;\n    return 'elif ' + text_const + ':\\n' + branch;\n  };\n\n  Python['else'] = function (block) {\n    let branch = Blockly.Python.statementToCode(block, 'DO');\n    branch = Blockly.Python.addLoopTrap(branch, block.id) || Blockly.Python.PASS;\n    return 'else:\\n' + branch;\n  };\n\n  Python['df'] = function (block) {\n    const text_def = Blockly.Python.valueToCode(block, 'def', Blockly.Python.ORDER_ATOMIC);\n    const text_params = Blockly.Python.valueToCode(block, 'params', Blockly.Python.ORDER_ATOMIC)\n    const code = text_def + '(' + text_params + ')\\n';\n    return code;\n  };\n\n  Python['whileout'] = function (block) {\n    var text_1 = Blockly.Python.valueToCode(block, 'cond', Blockly.Python.ORDER_ATOMIC);\n    let branch = Blockly.Python.statementToCode(block, 'DO');\n    branch = Blockly.Python.addLoopTrap(branch, block.id) || Blockly.Python.PASS;\n    const code = 'while ' + text_1 + ':\\n' + branch;\n    return code;\n  };\n\n  Python['time'] = function (block) {\n    // TODO: Assemble Python into code variable.\n    const code = 'import time\\n';\n    return code;\n  };\n\n  Python['import_math'] = function (block) {\n    const code = 'import math\\n';\n    return code;\n  };\n\n  Python['import_audio'] = function (block) {\n    const code = 'import audio\\n';\n    return code;\n  };\n\n  Python['sleep'] = function (block) {\n    const text_sleeptime = block.getFieldValue('sleep');\n    const code = 'sleep(' + text_sleeptime + ')\\n';\n    return code;\n  };\n\n  Python['print'] = function (block) {\n    const text_print = Blockly.Python.valueToCode(block, 'print', Blockly.Python.ORDER_ATOMIC)\n    // TODO: Assemble Python into code variable.\n    const code = 'print(\"' + text_print + '\")\\n';\n    return code;\n  };\n\n  Python['sleepnew'] = function(block) {\n    var value_name = Blockly.Python.valueToCode(block, 'sleep', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = 'sleep(' +value_name+ ')\\n';\n    return code;\n  };\n\n  Python['sleepus'] = function(block) {\n    var value_name = Blockly.Python.valueToCode(block, 'sleep', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = 'utime.sleep_us(' +value_name+ ')\\n';\n    return code;\n  };\n\n  Python['printnew'] = function (block) {\n    var text_print = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC)\n    || 'Hello World';\n    // TODO: Assemble Python into code variable.\n    const code = 'print(\"' + text_print + '\")\\n';\n    return code;\n  };\n\n  Python['equalsblocknew'] = function(block) {\n    var value_text1 = Blockly.Python.valueToCode(block, 'text1', Blockly.Python.ORDER_ATOMIC);\n    var value_text2 = Blockly.Python.valueToCode(block, 'text2', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = value_text1+ ' = ' +value_text2+ '\\n';\n    return code;\n  };\n\n  Python['define'] = function (block) {\n    const text_1 = Blockly.Python.valueToCode(block, '1', Blockly.Python.ORDER_ATOMIC)\n    const text_2 = Blockly.Python.valueToCode(block, '2', Blockly.Python.ORDER_ATOMIC)\n    let branch = Blockly.Python.statementToCode(block, 'DO');\n    branch = Blockly.Python.addLoopTrap(branch, block.id) || Blockly.Python.PASS;\n    // const statements_name = Blockly.Python.statementToCode(block, 'NAME');\n    // TODO: Assemble Python into code variable.\n    const code = 'def ' + text_1 + '(' + text_2 + '):\\n' + branch;\n    return code;\n  };\n\n  Python['greater'] = function (block) {\n    const text_1 = block.getFieldValue('1');\n    const text_v = block.getFieldValue('v');\n    let branch = Blockly.Python.statementToCode(block, 'DO');\n    branch = Blockly.Python.addLoopTrap(branch, block.id) || Blockly.Python.PASS;\n    // TODO: Assemble Python into code variable.\n    const code = 'while ' + text_1 + ' > ' + text_v + ':\\n' + branch;\n    return code;\n  };\n\n  Python['buttonapressed'] = function (block) {\n    const dropdown_name = block.getFieldValue('NAME');\n    // TODO: Assemble Python into code variable.\n    const code = 'button_' + dropdown_name + '.is_pressed()';\n    // TODO: Change ORDER_NONE to the correct strength.\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  };\n\n  Python['ifinline'] = function (block) {\n    let branch = Blockly.Python.statementToCode(block, 'ifstate');\n    branch = Blockly.Python.addLoopTrap(branch, block.id) || Blockly.Python.PASS;\n    const value_iftext = Blockly.Python.valueToCode(block, 'iftext', Blockly.Python.ORDER_ATOMIC);\n    const code = 'if ' + value_iftext + ':\\n' + branch;\n    return code;\n  };\n\n  Python['typeanything'] = function(block) {\n    var text_stuff = Blockly.Python.valueToCode(block, 'stuff', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = text_stuff + '# your own code\\n';\n    return code;\n  };\n\n  Python['elifinline'] = function (block) {\n    let branch = Blockly.Python.statementToCode(block, 'ifstate');\n    branch = Blockly.Python.addLoopTrap(branch, block.id) || Blockly.Python.PASS;\n    const value_iftext = Blockly.Python.valueToCode(block, 'iftext', Blockly.Python.ORDER_ATOMIC);\n    // const statements_ifstate = Blockly.Python.statementToCode(block, 'ifstate');\n    // TODO: Assemble Python into code variable.\n    const code = 'elif ' + value_iftext + ':\\n' + branch;\n    return code;\n  };\n \n  Python['internal'] = function(block) {\n    var value_first = Blockly.Python.valueToCode(block, 'first', Blockly.Python.ORDER_ATOMIC);\n    var text_choose = block.getFieldValue('choose');\n    var value_last = Blockly.Python.valueToCode(block, 'last', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = value_first+ ' ' +text_choose+ ' ' +value_last;\n    // TODO: Change ORDER_NONE to the correct strength.\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  };\n  Python['andor'] = Python['internal'];\n\n  Python['not'] = function (block) {\n    var value_bool = Blockly.Python.valueToCode(block, 'bool', Blockly.Python.ORDER_ATOMIC);\n    const code = 'not ' +  value_bool;\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  };\n\n  Python['operators3'] = function(block) {\n    var value_first = Blockly.Python.valueToCode(block, 'first', Blockly.Python.ORDER_ATOMIC);\n    var text_choose = block.getFieldValue('operators');\n    var value_last = Blockly.Python.valueToCode(block, 'last', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = value_first+ ' ' +text_choose+ ' ' +value_last;\n    // TODO: Change ORDER_NONE to the correct strength.\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  };\n\n  Python['mbint'] = function (block) {\n    var value_bool = Blockly.Python.valueToCode(block, 'bool', Blockly.Python.ORDER_ATOMIC);\n    const code = 'int(' +  value_bool+ ')';\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  };\n\n\n  Python['ticks'] = function (block) {\n    const code = 'utime.ticks_us()';\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  };\n\n  Python['break'] = function (block) {\n    const code = 'break\\n ';\n    return code;\n  };\n\n  Python['textinline'] = function(block) {\n    var text_text = block.getFieldValue('text');\n    // TODO: Assemble Python into code variable.\n    var code = text_text;\n    // TODO: Change ORDER_NONE to the correct strength.\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  };\n\n  Python['stringinline'] = function(block) {\n    var text_text = block.getFieldValue('text');\n    // TODO: Assemble Python into code variable.\n    var code = '\"' + text_text + '\"';\n    // TODO: Change ORDER_NONE to the correct strength.\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  };\n\n  Python['sliderinline'] = function(block) {\n    var text_text = block.getFieldValue('slider');\n    // TODO: Assemble Python into code variable.\n    var code = text_text;\n    // TODO: Change ORDER_NONE to the correct strength.\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  };\n\n\n  Python['varinlines'] = function(block) {\n    var variable_name = Blockly.Python.variableDB_.getName(block.getFieldValue('var'), Blockly.Variables.NAME_TYPE);\n    var text_text = block.getFieldValue('NAME');\n    var value_name = Blockly.Python.valueToCode(block, 'value', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = variable_name + ' ' +text_text+ ' ' +value_name+ '\\n';\n    return code;\n  };\n\n  Python['boolstatus'] = function(block) {\n    var dropdown_bool = block.getFieldValue('bool');\n    var code = dropdown_bool;\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  };\n\n  Python['variables_get'] = function(block) {\n    var variable_var = Blockly.Python.variableDB_.getName(block.getFieldValue('VAR'), Blockly.Variables.NAME_TYPE);\n    // TODO: Assemble Python into code variable.\n    var code = variable_var;\n    // TODO: Change ORDER_NONE to the correct strength.\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  };\n\n  Python['variables_set'] = function(block) {\n    var variable_var = Blockly.Python.variableDB_.getName(block.getFieldValue('VAR'), Blockly.Variables.NAME_TYPE);\n    var value_name = Blockly.Python.valueToCode(block, 'varset', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = variable_var+ ' = ' +value_name+ '\\n';\n    return code;\n  };\n\n}\n"],"sourceRoot":""}