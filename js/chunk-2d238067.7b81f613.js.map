{"version":3,"sources":["webpack:///./src/blocks/python/turtle/generators.ts"],"names":["define","Python","block","code","variable_turtle","Blockly","variableDB_","getName","getFieldValue","Variables","NAME_TYPE","variable_wn","text_color","valueToCode","ORDER_ATOMIC","dropdown_options","text_dist"],"mappings":"gHAAc,SAAUA,EAAOC,GAC7BA,EAAO,iBAAmB,SAASC,GAEjC,IAAIC,EAAO,yBACX,OAAOA,GAGTF,EAAO,UAAY,SAASC,GAC1B,IAAIE,EAAkBC,QAAQJ,OAAOK,YAAYC,QAAQL,EAAMM,cAAc,UAAWH,QAAQI,UAAUC,WAEtGP,EAAOC,EAAiB,gBAC5B,OAAOD,GAGTF,EAAO,cAAgB,SAASC,GAC9B,IAAIS,EAAcN,QAAQJ,OAAOK,YAAYC,QAAQL,EAAMM,cAAc,MAAOH,QAAQI,UAAUC,WAE9FP,EAAOQ,EAAa,gBACxB,OAAOR,GAGTF,EAAO,cAAgB,SAASC,GAC9B,IAAIS,EAAcN,QAAQJ,OAAOK,YAAYC,QAAQL,EAAMM,cAAc,MAAOH,QAAQI,UAAUC,WAClG,IAAIE,EAAaP,QAAQJ,OAAOY,YAAYX,EAAO,OAAQG,QAAQJ,OAAOa,cAE1E,IAAIX,EAAOQ,EAAa,YAAaC,EAAY,MACjD,OAAOT,GAGTF,EAAO,cAAgB,SAASC,GAC9B,IAAIE,EAAkBC,QAAQJ,OAAOK,YAAYC,QAAQL,EAAMM,cAAc,UAAWH,QAAQI,UAAUC,WACtGK,EAAmBb,EAAMM,cAAc,WAC3C,IAAIQ,EAAYX,QAAQJ,OAAOY,YAAYX,EAAO,OAAQG,QAAQJ,OAAOa,cAEzE,IAAIX,EAAOC,EAAiB,IAAKW,EAAkB,IAAKC,EAAW,MACnE,OAAOb,GAGTF,EAAO,SAAW,SAASC,GACzB,IAAIE,EAAkBC,QAAQJ,OAAOK,YAAYC,QAAQL,EAAMM,cAAc,UAAWH,QAAQI,UAAUC,WACtGK,EAAmBb,EAAMM,cAAc,WAEvCL,EAAOC,EAAiB,OAAQW,EAAkB,OACtD,OAAOZ,GAGTF,EAAO,OAAS,SAASC,GACvB,IAAIE,EAAkBC,QAAQJ,OAAOK,YAAYC,QAAQL,EAAMM,cAAc,UAAWH,QAAQI,UAAUC,WAEtGP,EAAOC,EAAgB,WAC3B,OAAOD,GAGTF,EAAO,aAAe,SAASC,GAC7B,IAAIE,EAAkBC,QAAQJ,OAAOK,YAAYC,QAAQL,EAAMM,cAAc,UAAWH,QAAQI,UAAUC,WAC1G,IAAIM,EAAYX,QAAQJ,OAAOY,YAAYX,EAAO,OAAQG,QAAQJ,OAAOa,cAEzE,IAAIX,EAAOC,EAAgB,aAAcY,EAAW,MACpD,OAAOb,GAGTF,EAAO,UAAY,SAASC,GAC1B,IAAIE,EAAkBC,QAAQJ,OAAOK,YAAYC,QAAQL,EAAMM,cAAc,UAAWH,QAAQI,UAAUC,WAC1G,IAAIM,EAAYX,QAAQJ,OAAOY,YAAYX,EAAO,OAAQG,QAAQJ,OAAOa,cAEzE,IAAIX,EAAOC,EAAgB,UAAWY,EAAW,MACjD,OAAOb,GAGTF,EAAO,cAAgB,SAASC,GAC9B,IAAIE,EAAkBC,QAAQJ,OAAOK,YAAYC,QAAQL,EAAMM,cAAc,MAAOH,QAAQI,UAAUC,WACtG,IAAIM,EAAYX,QAAQJ,OAAOY,YAAYX,EAAO,OAAQG,QAAQJ,OAAOa,cAEzE,IAAIX,EAAOC,EAAgB,cAAeY,EAAW,MACrD,OAAOb,GAGTF,EAAO,YAAc,SAASC,GAC5B,IAAIE,EAAkBC,QAAQJ,OAAOK,YAAYC,QAAQL,EAAMM,cAAc,UAAWH,QAAQI,UAAUC,WAC1G,IAAIM,EAAYX,QAAQJ,OAAOY,YAAYX,EAAO,OAAQG,QAAQJ,OAAOa,cAEzE,IAAIX,EAAOC,EAAgB,UAAWY,EAAW,MACjD,OAAOb,GAGTF,EAAO,eAAiB,SAASC,GAC/B,IAAIE,EAAkBC,QAAQJ,OAAOK,YAAYC,QAAQL,EAAMM,cAAc,UAAWH,QAAQI,UAAUC,WAC1G,IAAIM,EAAYX,QAAQJ,OAAOY,YAAYX,EAAO,OAAQG,QAAQJ,OAAOa,cAEzE,IAAIX,EAAOC,EAAgB,UAAWY,EAAW,MACjD,OAAOb,GAGTF,EAAO,eAAiB,SAASC,GAC/B,IAAIE,EAAkBC,QAAQJ,OAAOK,YAAYC,QAAQL,EAAMM,cAAc,UAAWH,QAAQI,UAAUC,WAC1G,IAAIM,EAAYX,QAAQJ,OAAOY,YAAYX,EAAO,OAAQG,QAAQJ,OAAOa,cAEzE,IAAIX,EAAOC,EAAgB,UAAWY,EAAW,MACjD,OAAOb,GAGTF,EAAO,UAAY,SAASC,GAC1B,IAAIE,EAAkBC,QAAQJ,OAAOK,YAAYC,QAAQL,EAAMM,cAAc,UAAWH,QAAQI,UAAUC,WAC1G,IAAIM,EAAYX,QAAQJ,OAAOY,YAAYX,EAAO,OAAQG,QAAQJ,OAAOa,cAEzE,IAAIX,EAAOC,EAAgB,WAAYY,EAAW,MAClD,OAAOb,GAGTF,EAAO,QAAU,SAASC,GACxB,IAAIE,EAAkBC,QAAQJ,OAAOK,YAAYC,QAAQL,EAAMM,cAAc,UAAWH,QAAQI,UAAUC,WAC1G,IAAIM,EAAYX,QAAQJ,OAAOY,YAAYX,EAAO,OAAQG,QAAQJ,OAAOa,cAEzE,IAAIX,EAAOC,EAAgB,SAAUY,EAAW,MAChD,OAAOb,GAlHX","file":"js/chunk-2d238067.7b81f613.js","sourcesContent":["export default function define(Python: Blockly.BlockGenerators) {\n  Python['import_turtle'] = function(block) {\n    // TODO: Assemble Python into code variable.\n    var code = 'from turtle import *\\n';\n    return code;\n  }; \n\n  Python['turtle'] = function(block) {\n    var variable_turtle = Blockly.Python.variableDB_.getName(block.getFieldValue('turtle'), Blockly.Variables.NAME_TYPE);\n    // TODO: Assemble Python into code variable.\n    var code = variable_turtle+ ' = Turtle()\\n';\n    return code;\n  };\n  \n  Python['screeninit'] = function(block) {\n    var variable_wn = Blockly.Python.variableDB_.getName(block.getFieldValue('wn'), Blockly.Variables.NAME_TYPE);\n    // TODO: Assemble Python into code variable.\n    var code = variable_wn+ ' = Screen()\\n';\n    return code;\n  };\n\n  Python['background'] = function(block) {\n    var variable_wn = Blockly.Python.variableDB_.getName(block.getFieldValue('wn'), Blockly.Variables.NAME_TYPE);\n    let text_color = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = variable_wn+ '.bgcolor(' +text_color+ ')\\n';\n    return code;\n  };\n\n  Python['directions'] = function(block) {\n    var variable_turtle = Blockly.Python.variableDB_.getName(block.getFieldValue('turtle'), Blockly.Variables.NAME_TYPE);\n    var dropdown_options = block.getFieldValue('options');\n    let text_dist = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = variable_turtle+ '.' +dropdown_options+ '(' +text_dist+ ')\\n';\n    return code;\n  };\n\n  Python['penud'] = function(block) {\n    var variable_turtle = Blockly.Python.variableDB_.getName(block.getFieldValue('turtle'), Blockly.Variables.NAME_TYPE);\n    var dropdown_options = block.getFieldValue('options');\n    // TODO: Assemble Python into code variable.\n    var code = variable_turtle+ '.pen' +dropdown_options+ '()\\n';\n    return code;\n  };\n\n  Python['pen'] = function(block) {\n    var variable_turtle = Blockly.Python.variableDB_.getName(block.getFieldValue('turtle'), Blockly.Variables.NAME_TYPE);\n    // TODO: Assemble Python into code variable.\n    var code = variable_turtle+'.Pen()\\n';\n    return code;\n  };\n\n  Python['colourpen'] = function(block) {\n    var variable_turtle = Blockly.Python.variableDB_.getName(block.getFieldValue('turtle'), Blockly.Variables.NAME_TYPE);\n    let text_dist = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = variable_turtle+'.pencolor(' +text_dist+ ')\\n';\n    return code;\n  };\n\n  Python['colour'] = function(block) {\n    var variable_turtle = Blockly.Python.variableDB_.getName(block.getFieldValue('turtle'), Blockly.Variables.NAME_TYPE);\n    let text_dist = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = variable_turtle+'.color(' +text_dist+ ')\\n';\n    return code;\n  };\n\n  Python['colourmode'] = function(block) {\n    var variable_turtle = Blockly.Python.variableDB_.getName(block.getFieldValue('wn'), Blockly.Variables.NAME_TYPE);\n    let text_dist = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = variable_turtle+'.colormode(' +text_dist+ ')\\n';\n    return code;\n  };\n\n  Python['penwidth'] = function(block) {\n    var variable_turtle = Blockly.Python.variableDB_.getName(block.getFieldValue('turtle'), Blockly.Variables.NAME_TYPE);\n    let text_dist = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = variable_turtle+'.width(' +text_dist+ ')\\n';\n    return code;\n  };\n  \n  Python['turtlespeed'] = function(block) {\n    var variable_turtle = Blockly.Python.variableDB_.getName(block.getFieldValue('turtle'), Blockly.Variables.NAME_TYPE);\n    let text_dist = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = variable_turtle+'.speed(' +text_dist+ ')\\n';\n    return code;\n  };\n\n  Python['turtleshape'] = function(block) {\n    var variable_turtle = Blockly.Python.variableDB_.getName(block.getFieldValue('turtle'), Blockly.Variables.NAME_TYPE);\n    let text_dist = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = variable_turtle+'.shape(' +text_dist+ ')\\n';\n    return code;\n  };\n\n  Python['circle'] = function(block) {\n    var variable_turtle = Blockly.Python.variableDB_.getName(block.getFieldValue('turtle'), Blockly.Variables.NAME_TYPE);\n    let text_dist = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = variable_turtle+'.circle(' +text_dist+ ')\\n';\n    return code;\n  };\n\n  Python['goto'] = function(block) {\n    var variable_turtle = Blockly.Python.variableDB_.getName(block.getFieldValue('turtle'), Blockly.Variables.NAME_TYPE);\n    let text_dist = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = variable_turtle+'.goto(' +text_dist+ ')\\n';\n    return code;\n  };\n}\n"],"sourceRoot":""}