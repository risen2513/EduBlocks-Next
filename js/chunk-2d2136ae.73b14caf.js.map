{"version":3,"sources":["webpack:///./src/blocks/circuitpython/analog/generators.ts"],"names":["define","Python","block","code","variable_pin","Blockly","variableDB_","getName","getFieldValue","Variables","NAME_TYPE","text_pinno","valueToCode","ORDER_ATOMIC","text_text"],"mappings":"gHAAc,SAAUA,EAAOC,GAG7BA,EAAO,mBAAqB,SAAUC,GACpC,MAAMC,EAAO,2BACb,OAAOA,GAITF,EAAO,aAAe,SAASC,GAC7B,IAAIE,EAAeC,QAAQJ,OAAOK,YAAYC,QAAQL,EAAMM,cAAc,OAAQH,QAAQI,UAAUC,WAChGC,EAAaN,QAAQJ,OAAOW,YAAYV,EAAO,OAAQG,QAAQJ,OAAOY,cAEtEV,EAAOC,EAAc,eAAgBO,EAAY,MACrD,OAAOR,GAGTF,EAAO,cAAgB,SAASC,GAC9B,IAAIE,EAAeC,QAAQJ,OAAOK,YAAYC,QAAQL,EAAMM,cAAc,OAAQH,QAAQI,UAAUC,WAChGC,EAAaN,QAAQJ,OAAOW,YAAYV,EAAO,OAAQG,QAAQJ,OAAOY,cAEtEV,EAAOC,EAAc,gBAAiBO,EAAY,MACtD,OAAOR,GAGTF,EAAO,kBAAoB,SAASC,GAClC,IAAIE,EAAeC,QAAQJ,OAAOK,YAAYC,QAAQL,EAAMM,cAAc,OAAQH,QAAQI,UAAUC,WAChGI,EAAYT,QAAQJ,OAAOW,YAAYV,EAAO,OAAQG,QAAQJ,OAAOY,eAC1E,OAEKV,EAAOC,EAAc,YAAaU,EAAW,KACjD,OAAOX,GAKTF,EAAO,aAAe,SAASC,GAC7B,IAAIE,EAAeC,QAAQJ,OAAOK,YAAYC,QAAQL,EAAMM,cAAc,OAAQH,QAAQI,UAAUC,WAEhGP,EAAOC,EAAa,SAExB,MAAO,CAACD,EAAME,QAAQJ,OAAOY,eAzCjC","file":"js/chunk-2d2136ae.73b14caf.js","sourcesContent":["export default function define(Python: Blockly.BlockGenerators) {\n\n\n  Python['import_analogio'] = function (block) {\n    const code = 'from analogio import *\\n';\n    return code;\n  };\n\n\n  Python['analog_in'] = function(block) {\n    var variable_pin = Blockly.Python.variableDB_.getName(block.getFieldValue('pin'), Blockly.Variables.NAME_TYPE);\n    var text_pinno = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = variable_pin+ ' = AnalogIn(' +text_pinno+ ')\\n';\n    return code;\n  };\n\n  Python['analog_out'] = function(block) {\n    var variable_pin = Blockly.Python.variableDB_.getName(block.getFieldValue('pin'), Blockly.Variables.NAME_TYPE);\n    var text_pinno = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = variable_pin+ ' = AnalogOut(' +text_pinno+ ')\\n';\n    return code;\n  };\n\n  Python['analogpinvalue'] = function(block) {\n    var variable_pin = Blockly.Python.variableDB_.getName(block.getFieldValue('pin'), Blockly.Variables.NAME_TYPE);\n    var text_text = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC)\n|| 'True';\n    // TODO: Assemble Python into code variable.\n    var code = variable_pin+ '.value = ' +text_text+ '\\n';\n    return code;\n  };\n\n  \n\n  Python['valinline'] = function(block) {\n    var variable_pin = Blockly.Python.variableDB_.getName(block.getFieldValue('pin'), Blockly.Variables.NAME_TYPE);\n    // TODO: Assemble Python into code variable.\n    var code = variable_pin+\".value\";\n    // TODO: Change ORDER_NONE to the correct strength.\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  };\n\n}\n"],"sourceRoot":""}