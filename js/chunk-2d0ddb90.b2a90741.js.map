{"version":3,"sources":["webpack:///./src/blocks/microbit/speech/generators.ts"],"names":["define","Python","block","code","text_words","getFieldValue","Blockly","valueToCode","ORDER_ATOMIC","text_pro","text_sing"],"mappings":"gHAAc,SAAUA,EAAOC,GAE7BA,EAAO,YAAc,SAAUC,GAE7B,MAAMC,EAAO,kBACb,OAAOA,GAGTF,EAAO,aAAe,SAAUC,GAC9B,MAAME,EAAaF,EAAMG,cAAc,SAEjCF,EAAO,eAAiBC,EAAa,OAC3C,OAAOD,GAGTF,EAAO,gBAAkB,SAAUC,GACjC,IAAIE,EAAaE,QAAQL,OAAOM,YAAYL,EAAO,OAAQI,QAAQL,OAAOO,eACvE,OAEH,MAAML,EAAO,eAAiBC,EAAa,OAC3C,OAAOD,GAGTF,EAAO,aAAe,SAAUC,GAC9B,MAAMO,EAAWP,EAAMG,cAAc,OAE/BF,EAAO,qBAAuBM,EAAW,OAC/C,OAAON,GAGTF,EAAO,gBAAkB,SAAUC,GACjC,IAAIO,EAAWH,QAAQL,OAAOM,YAAYL,EAAO,OAAQI,QAAQL,OAAOO,eACrE,OAEH,MAAML,EAAO,qBAAuBM,EAAW,OAC/C,OAAON,GAGTF,EAAO,cAAgB,SAAUC,GAC/B,MAAMQ,EAAYR,EAAMG,cAAc,QAEhCF,EAAO,gBAAkBO,EAAY,OAC3C,OAAOP,GAGTF,EAAO,cAAgB,SAAUC,GAC/B,IAAIQ,EAAYJ,QAAQL,OAAOM,YAAYL,EAAO,OAAQI,QAAQL,OAAOO,eACtE,OAEH,MAAML,EAAO,gBAAkBO,EAAY,OAC3C,OAAOP,GAlDX","file":"js/chunk-2d0ddb90.b2a90741.js","sourcesContent":["export default function define(Python: Blockly.BlockGenerators) {\n\n  Python['imspeech'] = function (block) {\n    // TODO: Assemble Python into code variable.\n    const code = 'import speech\\n';\n    return code;\n  };\n\n  Python['speechsay'] = function (block) {\n    const text_words = block.getFieldValue('words');\n    // TODO: Assemble Python into code variable.\n    const code = 'speech.say(\"' + text_words + '\")\\n';\n    return code;\n  };\n\n  Python['speechsaynew'] = function (block) {\n    var text_words = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC)\n    || 'True';\n    // TODO: Assemble Python into code variable.\n    const code = 'speech.say(\"' + text_words + '\")\\n';\n    return code;\n  };\n\n  Python['speechpro'] = function (block) {\n    const text_pro = block.getFieldValue('pro');\n    // TODO: Assemble Python into code variable.\n    const code = 'speech.pronounce(\"' + text_pro + '\")\\n';\n    return code;\n  };\n\n  Python['speechpronew'] = function (block) {\n    var text_pro = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC)\n    || 'True';\n    // TODO: Assemble Python into code variable.\n    const code = 'speech.pronounce(\"' + text_pro + '\")\\n';\n    return code;\n  };\n\n  Python['speechsing'] = function (block) {\n    const text_sing = block.getFieldValue('sing');\n    // TODO: Assemble Python into code variable.\n    const code = 'speech.sing(\"' + text_sing + '\")\\n';\n    return code;\n  };\n\n  Python['speechsing'] = function (block) {\n    var text_sing = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC)\n    || 'True';\n    // TODO: Assemble Python into code variable.\n    const code = 'speech.sing(\"' + text_sing + '\")\\n';\n    return code;\n  };\n}\n"],"sourceRoot":""}