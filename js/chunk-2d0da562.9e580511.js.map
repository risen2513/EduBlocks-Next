{"version":3,"sources":["webpack:///./src/blocks/python/variables/definitions.ts"],"names":["define","Blocks","init","this","appendDummyInput","appendField","Blockly","FieldVariable","setOutput","setOutputShape","OUTPUT_SHAPE_ROUND","setColour","setTooltip","setHelpUrl","FieldDropdown","appendValueInput","setCheck","setInputsInline","setPreviousStatement","setNextStatement","FieldTextInput"],"mappings":"kHAAc,SAAUA,EAAOC,GAE7BA,EAAO,iBAAmB,CACxBC,KAAM,WACJC,KAAKC,mBACAC,YAAY,IAAIC,QAAQC,cAAc,OAAQ,OACnDJ,KAAKK,WAAU,EAAM,MACrBL,KAAKM,eAAeH,QAAQI,oBAC5BP,KAAKQ,UAAU,WAClBR,KAAKS,WAAW,IAChBT,KAAKU,WAAW,MAKjBZ,EAAO,iBAAmB,CACxBC,KAAM,WACJC,KAAKC,mBACFC,YAAY,IAAIC,QAAQC,cAAc,IAAK,OAC3CF,YAAY,IAAIC,QAAQQ,cAAc,CAAC,CAAC,IAAK,KAAM,CAAC,KAAM,MAAO,CAAC,KAAM,QAAS,QACpFX,KAAKY,iBAAiB,UACnBC,SAAS,MACZb,KAAKc,iBAAgB,GACrBd,KAAKe,sBAAqB,EAAM,MAChCf,KAAKgB,kBAAiB,EAAM,MAC5BhB,KAAKQ,UAAU,WACfR,KAAKS,WAAW,sDAChBT,KAAKU,WAAW,MAIpBZ,EAAO,cAAgB,CACrBC,KAAM,WACJC,KAAKC,mBACFC,YAAY,IAAIC,QAAQc,eAAe,IAAK,QAC/CjB,KAAKc,iBAAgB,GACrBd,KAAKK,WAAU,EAAM,MACrBL,KAAKQ,UAAU,UAAW,UAAW,WACrCR,KAAKM,eAAeH,QAAQI,oBAC5BP,KAAKS,WAAW,+BAChBT,KAAKU,WAAW,MAxCtB","file":"js/chunk-2d0da562.9e580511.js","sourcesContent":["export default function define(Blocks: Blockly.BlockDefinitions) {\n\n  Blocks['variables_get'] = {\n    init: function() {\n      this.appendDummyInput()\n          .appendField(new Blockly.FieldVariable(\"var\"), \"VAR\");\n      this.setOutput(true, null);\n      this.setOutputShape(Blockly.OUTPUT_SHAPE_ROUND);\n      this.setColour(\"#0000CD\");\n   this.setTooltip(\"\");\n   this.setHelpUrl(\"\");\n    }\n  };\n\n\n  Blocks['variables_set'] = {\n    init: function() {\n      this.appendDummyInput()\n        .appendField(new Blockly.FieldVariable(\"\"), \"VAR\")\n        .appendField(new Blockly.FieldDropdown([['=', '='], ['+=', '+='], [\"-=\", \"-=\"]]), 'NAME')\n      this.appendValueInput(\"varset\")\n        .setCheck(null);\n      this.setInputsInline(true);\n      this.setPreviousStatement(true, null);\n      this.setNextStatement(true, null);\n      this.setColour(\"#0000CD\");\n      this.setTooltip(\"assign a value, increment, or decrement a variable\");\n      this.setHelpUrl(\"\");\n    }\n  };\n\n  Blocks['textinline'] = {\n    init: function() {\n      this.appendDummyInput()\n        .appendField(new Blockly.FieldTextInput(\"\"), \"text\");\n      this.setInputsInline(true);\n      this.setOutput(true, null);\n      this.setColour(\"#FFFFFF\", \"#FFFFFF\", \"#FFFFFF\");\n      this.setOutputShape(Blockly.OUTPUT_SHAPE_ROUND);\n      this.setTooltip(\"Text input for inline input\");\n      this.setHelpUrl(\"\");\n    }\n  };\n\n  \n}\n\n"],"sourceRoot":""}