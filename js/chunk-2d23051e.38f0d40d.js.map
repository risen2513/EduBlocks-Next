{"version":3,"sources":["webpack:///./src/blocks/python/logic/generators.ts"],"names":["define","Python","block","branch","Blockly","statementToCode","addLoopTrap","id","PASS","value_iftext","valueToCode","ORDER_ATOMIC","code","value_first","text_choose","getFieldValue","value_last","value_bool"],"mappings":"gHAAc,SAAUA,EAAOC,GAC7BA,EAAO,eAAiB,SAAUC,GAChC,IAAIC,EAASC,QAAQH,OAAOI,gBAAgBH,EAAO,WACnDC,EAASC,QAAQH,OAAOK,YAAYH,EAAQD,EAAMK,KAAOH,QAAQH,OAAOO,KACxE,MAAMC,EAAeL,QAAQH,OAAOS,YAAYR,EAAO,SAAUE,QAAQH,OAAOU,cAC1EC,EAAO,MAAQH,EAAe,MAAQN,EAC5C,OAAOS,GAGTX,EAAO,iBAAmB,SAAUC,GAClC,IAAIC,EAASC,QAAQH,OAAOI,gBAAgBH,EAAO,WACnDC,EAASC,QAAQH,OAAOK,YAAYH,EAAQD,EAAMK,KAAOH,QAAQH,OAAOO,KACxE,MAAMC,EAAeL,QAAQH,OAAOS,YAAYR,EAAO,SAAUE,QAAQH,OAAOU,cAG1EC,EAAO,QAAUH,EAAe,MAAQN,EAC9C,OAAOS,GAGTX,EAAO,WAAa,SAAUC,GAC5B,IAAIC,EAASC,QAAQH,OAAOI,gBAAgBH,EAAO,MAEnD,OADAC,EAASC,QAAQH,OAAOK,YAAYH,EAAQD,EAAMK,KAAOH,QAAQH,OAAOO,KACjE,UAAYL,GAGrBF,EAAO,eAAiB,SAASC,GAC/B,IAAIW,EAAcT,QAAQH,OAAOS,YAAYR,EAAO,QAASE,QAAQH,OAAOU,cACxEG,EAAcZ,EAAMa,cAAc,UAClCC,EAAaZ,QAAQH,OAAOS,YAAYR,EAAO,OAAQE,QAAQH,OAAOU,cAEtEC,EAAOC,EAAa,IAAKC,EAAa,IAAKE,EAE/C,MAAO,CAACJ,EAAMR,QAAQH,OAAOU,eAG/BV,EAAO,YAAcA,EAAO,eAE5BA,EAAO,UAAY,SAAUC,GAC3B,IAAIe,EAAab,QAAQH,OAAOS,YAAYR,EAAO,OAAQE,QAAQH,OAAOU,cAC1E,MAAMC,EAAO,OAAUK,EACvB,MAAO,CAACL,EAAMR,QAAQH,OAAOU,eAxCjC","file":"js/chunk-2d23051e.38f0d40d.js","sourcesContent":["export default function define(Python: Blockly.BlockGenerators) {\n  Python['webifinline'] = function (block) {\n    let branch = Blockly.Python.statementToCode(block, 'ifstate');\n    branch = Blockly.Python.addLoopTrap(branch, block.id) || Blockly.Python.PASS;\n    const value_iftext = Blockly.Python.valueToCode(block, 'iftext', Blockly.Python.ORDER_ATOMIC);\n    const code = 'if ' + value_iftext + ':\\n' + branch;\n    return code;\n  };\n\n  Python['webelifinline'] = function (block) {\n    let branch = Blockly.Python.statementToCode(block, 'ifstate');\n    branch = Blockly.Python.addLoopTrap(branch, block.id) || Blockly.Python.PASS;\n    const value_iftext = Blockly.Python.valueToCode(block, 'iftext', Blockly.Python.ORDER_ATOMIC);\n    // const statements_ifstate = Blockly.Python.statementToCode(block, 'ifstate');\n    // TODO: Assemble Python into code variable.\n    const code = 'elif ' + value_iftext + ':\\n' + branch;\n    return code;\n  };\n\n  Python['webelse'] = function (block) {\n    let branch = Blockly.Python.statementToCode(block, 'DO'); \n    branch = Blockly.Python.addLoopTrap(branch, block.id) || Blockly.Python.PASS;\n    return 'else:\\n' + branch;\n  };\n\n  Python['webinternal'] = function(block) {\n    var value_first = Blockly.Python.valueToCode(block, 'first', Blockly.Python.ORDER_ATOMIC);\n    var text_choose = block.getFieldValue('choose');\n    var value_last = Blockly.Python.valueToCode(block, 'last', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = value_first+ ' ' +text_choose+ ' ' +value_last;\n    // TODO: Change ORDER_NONE to the correct strength.\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  };\n  \n  Python['webandor'] = Python['webinternal'];\n\n  Python['webnot'] = function (block) {\n    var value_bool = Blockly.Python.valueToCode(block, 'bool', Blockly.Python.ORDER_ATOMIC);\n    const code = 'not ' +  value_bool;\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  };\n\n\n}\n"],"sourceRoot":""}