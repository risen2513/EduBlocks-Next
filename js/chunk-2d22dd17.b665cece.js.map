{"version":3,"sources":["webpack:///./src/blocks/circuitpython/neopixel/generators.ts"],"names":["define","Python","block","variable_name","Blockly","variableDB_","getName","getFieldValue","Variables","NAME_TYPE","text_inputneo","valueToCode","ORDER_ATOMIC","code","text_neonum","text_colour"],"mappings":"gHAAc,SAAUA,EAAOC,GAG7BA,EAAO,UAAY,SAASC,GAC1B,IAAIC,EAAgBC,QAAQH,OAAOI,YAAYC,QAAQJ,EAAMK,cAAc,QAASH,QAAQI,UAAUC,WACtG,IAAIC,EAAgBN,QAAQH,OAAOU,YAAYT,EAAO,OAAQE,QAAQH,OAAOW,eAC9E,GACC,IAAIC,EAAOV,EAAe,wBAAyBO,EAAe,MAClE,OAAOG,GAGTZ,EAAO,QAAU,SAASC,GACxB,IAAIC,EAAgBC,QAAQH,OAAOI,YAAYC,QAAQJ,EAAMK,cAAc,QAASH,QAAQI,UAAUC,WACtG,IAAIC,EAAgBN,QAAQH,OAAOU,YAAYT,EAAO,OAAQE,QAAQH,OAAOW,eAC9E,GACC,IAAIC,EAAOV,EAAe,SAAUO,EAAe,MACnD,OAAOG,GAGTZ,EAAO,aAAe,SAASC,GAC7B,IAAIW,EAAO,oBACX,OAAOA,GAITZ,EAAO,aAAe,SAASC,GAC7B,IAAIC,EAAgBC,QAAQH,OAAOI,YAAYC,QAAQJ,EAAMK,cAAc,QAASH,QAAQI,UAAUC,WAClGK,EAAcV,QAAQH,OAAOU,YAAYT,EAAO,OAAQE,QAAQH,OAAOW,cACvEG,EAAcX,QAAQH,OAAOU,YAAYT,EAAO,QAASE,QAAQH,OAAOW,cAExEC,EAAOV,EAAe,IAAKW,EAAa,QAASC,EAAa,MAClE,OAAOF,GAGTZ,EAAO,WAAa,SAASC,GAC3B,IAAIC,EAAgBC,QAAQH,OAAOI,YAAYC,QAAQJ,EAAMK,cAAc,QAASH,QAAQI,UAAUC,WAElGI,EAAOV,EAAe,YAC1B,OAAOU,GAGTZ,EAAO,YAAc,SAASC,GAC5B,IAAIC,EAAgBC,QAAQH,OAAOI,YAAYC,QAAQJ,EAAMK,cAAc,QAASH,QAAQI,UAAUC,WAElGI,EAAOV,EAAe,aAC1B,OAAOU,GA7CX","file":"js/chunk-2d22dd17.b665cece.js","sourcesContent":["export default function define(Python: Blockly.BlockGenerators) {\n\n\n  Python['setneo'] = function(block) {\n    let variable_name = Blockly.Python.variableDB_.getName(block.getFieldValue('NAME'), Blockly.Variables.NAME_TYPE);\n    var text_inputneo = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC)\n|| '';\n    let code = variable_name+ ' = neopixel.NeoPixel(' +text_inputneo+ ')\\n';\n    return code;\n  };\n\n  Python['fill'] = function(block) {\n    let variable_name = Blockly.Python.variableDB_.getName(block.getFieldValue('NAME'), Blockly.Variables.NAME_TYPE);\n    var text_inputneo = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC)\n|| '';\n    let code = variable_name+ '.fill(' +text_inputneo+ ')\\n';\n    return code;\n  };\n\n  Python['importneo'] = function(block) {\n    let code = 'import neopixel\\n';\n    return code;\n  };\n \n\n  Python['neovarnew'] = function(block) {\n    var variable_name = Blockly.Python.variableDB_.getName(block.getFieldValue('NAME'), Blockly.Variables.NAME_TYPE);\n    var text_neonum = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    var text_colour = Blockly.Python.valueToCode(block, 'text1', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = variable_name+ '[' +text_neonum+ '] = (' +text_colour+ ')\\n';\n    return code;\n};\n\n  Python['neoshow'] = function(block) {\n    var variable_name = Blockly.Python.variableDB_.getName(block.getFieldValue('NAME'), Blockly.Variables.NAME_TYPE);\n    // TODO: Assemble Python into code variable.\n    var code = variable_name+ '.show()\\n';\n    return code;\n  };\n\n  Python['neoclear'] = function(block) {\n    var variable_name = Blockly.Python.variableDB_.getName(block.getFieldValue('NAME'), Blockly.Variables.NAME_TYPE);\n    // TODO: Assemble Python into code variable.\n    var code = variable_name+ '.clear()\\n';\n    return code;\n  };\n\n}\n"],"sourceRoot":""}