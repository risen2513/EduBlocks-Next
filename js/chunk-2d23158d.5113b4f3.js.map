{"version":3,"sources":["webpack:///./src/blocks/microbit/neopixel/generators.ts"],"names":["define","Python","block","variable_name","Blockly","variableDB_","getName","getFieldValue","Variables","NAME_TYPE","text_inputneo","valueToCode","ORDER_ATOMIC","code","text_neonum","text_colour"],"mappings":"gHAAc,SAAUA,EAAOC,GAG7BA,EAAO,aAAe,SAASC,GAC7B,IAAIC,EAAgBC,QAAQH,OAAOI,YAAYC,QAAQJ,EAAMK,cAAc,QAASH,QAAQI,UAAUC,WACtG,IAAIC,EAAgBN,QAAQH,OAAOU,YAAYT,EAAO,OAAQE,QAAQH,OAAOW,eAC1E,OACH,IAAIC,EAAOV,EAAe,wBAAyBO,EAAe,MAClE,OAAOG,GAGTZ,EAAO,UAAY,SAASC,GAC1B,IAAIC,EAAgBC,QAAQH,OAAOI,YAAYC,QAAQJ,EAAMK,cAAc,QAASH,QAAQI,UAAUC,WAClGC,EAAgBR,EAAMK,cAAc,YACpCM,EAAOV,EAAe,wBAAyBO,EAAe,MAClE,OAAOG,GAGTZ,EAAO,aAAe,SAASC,GAC7B,IAAIW,EAAO,oBACX,OAAOA,GAITZ,EAAO,UAAY,SAASC,GAC1B,IAAIC,EAAgBC,QAAQH,OAAOI,YAAYC,QAAQJ,EAAMK,cAAc,QAASH,QAAQI,UAAUC,WAClGK,EAAcZ,EAAMK,cAAc,UAClCQ,EAAcb,EAAMK,cAAc,UAElCM,EAAOV,EAAe,IAAKW,EAAa,QAASC,EAAa,MAClE,OAAOF,GAGTZ,EAAO,aAAe,SAASC,GAC7B,IAAIC,EAAgBC,QAAQH,OAAOI,YAAYC,QAAQJ,EAAMK,cAAc,QAASH,QAAQI,UAAUC,WAClGK,EAAcV,QAAQH,OAAOU,YAAYT,EAAO,OAAQE,QAAQH,OAAOW,eACxE,OACCG,EAAcX,QAAQH,OAAOU,YAAYT,EAAO,QAASE,QAAQH,OAAOW,eACzE,OAECC,EAAOV,EAAe,IAAKW,EAAa,QAASC,EAAa,MAClE,OAAOF,GAGTZ,EAAO,WAAa,SAASC,GAC3B,IAAIC,EAAgBC,QAAQH,OAAOI,YAAYC,QAAQJ,EAAMK,cAAc,QAASH,QAAQI,UAAUC,WAElGI,EAAOV,EAAe,YAC1B,OAAOU,GAGTZ,EAAO,YAAc,SAASC,GAC5B,IAAIC,EAAgBC,QAAQH,OAAOI,YAAYC,QAAQJ,EAAMK,cAAc,QAASH,QAAQI,UAAUC,WAElGI,EAAOV,EAAe,aAC1B,OAAOU,GAvDX","file":"js/chunk-2d23158d.5113b4f3.js","sourcesContent":["export default function define(Python: Blockly.BlockGenerators) {\n\n\n  Python['setneonew'] = function(block) {\n    let variable_name = Blockly.Python.variableDB_.getName(block.getFieldValue('NAME'), Blockly.Variables.NAME_TYPE);\n    var text_inputneo = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC)\n    || 'True';\n    let code = variable_name+ ' = neopixel.NeoPixel(' +text_inputneo+ ')\\n';\n    return code;\n  };\n\n  Python['setneo'] = function(block) {\n    let variable_name = Blockly.Python.variableDB_.getName(block.getFieldValue('NAME'), Blockly.Variables.NAME_TYPE);\n    let text_inputneo = block.getFieldValue('inputneo');\n    let code = variable_name+ ' = neopixel.NeoPixel(' +text_inputneo+ ')\\n';\n    return code;\n  };\n\n  Python['importneo'] = function(block) {\n    let code = 'import neopixel\\n';\n    return code;\n  }; \n\n\n  Python['neovar'] = function(block) {\n    var variable_name = Blockly.Python.variableDB_.getName(block.getFieldValue('NAME'), Blockly.Variables.NAME_TYPE);\n    var text_neonum = block.getFieldValue('neonum');\n    var text_colour = block.getFieldValue('colour');\n    // TODO: Assemble Python into code variable.\n    var code = variable_name+ '[' +text_neonum+ '] = (' +text_colour+ ')\\n';\n    return code;\n  };\n\n  Python['neovarnew'] = function(block) {\n    var variable_name = Blockly.Python.variableDB_.getName(block.getFieldValue('NAME'), Blockly.Variables.NAME_TYPE);\n    var text_neonum = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC)\n    || 'True';\n    var text_colour = Blockly.Python.valueToCode(block, 'text1', Blockly.Python.ORDER_ATOMIC)\n    || 'True';\n    // TODO: Assemble Python into code variable.\n    var code = variable_name+ '[' +text_neonum+ '] = (' +text_colour+ ')\\n';\n    return code;\n  };\n\n  Python['neoshow'] = function(block) {\n    var variable_name = Blockly.Python.variableDB_.getName(block.getFieldValue('NAME'), Blockly.Variables.NAME_TYPE);\n    // TODO: Assemble Python into code variable.\n    var code = variable_name+ '.show()\\n';\n    return code;\n  };\n\n  Python['neoclear'] = function(block) {\n    var variable_name = Blockly.Python.variableDB_.getName(block.getFieldValue('NAME'), Blockly.Variables.NAME_TYPE);\n    // TODO: Assemble Python into code variable.\n    var code = variable_name+ '.clear()\\n';\n    return code;\n  };\n\n}\n"],"sourceRoot":""}