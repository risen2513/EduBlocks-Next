{"version":3,"sources":["webpack:///./src/blocks/circuitpython/audio/generators.ts"],"names":["define","Python","block","code","variable_pin","Blockly","variableDB_","getName","getFieldValue","Variables","NAME_TYPE","text_pinno","valueToCode","ORDER_ATOMIC","variable_variable"],"mappings":"kHAAc,SAAUA,EAAOC,GAG7BA,EAAO,gBAAkB,SAAUC,GACjC,MAAMC,EAAO,mBACb,OAAOA,GAGTF,EAAO,cAAgB,SAASC,GAC9B,IAAIE,EAAeC,QAAQJ,OAAOK,YAAYC,QAAQL,EAAMM,cAAc,OAAQH,QAAQI,UAAUC,WAChGC,EAAaN,QAAQJ,OAAOW,YAAYV,EAAO,OAAQG,QAAQJ,OAAOY,eAC3E,GAEKV,EAAOC,EAAc,uBAAwBO,EAAY,MAC7D,OAAOR,GAGTF,EAAO,aAAe,SAASC,GAC7B,IAAIE,EAAeC,QAAQJ,OAAOK,YAAYC,QAAQL,EAAMM,cAAc,OAAQH,QAAQI,UAAUC,WAChGC,EAAaN,QAAQJ,OAAOW,YAAYV,EAAO,OAAQG,QAAQJ,OAAOY,eAC3E,GAEKV,EAAOC,EAAc,uBAAwBO,EAAY,MAC7D,OAAOR,GAGTF,EAAO,gBAAkB,SAASC,GAChC,IAAIE,EAAeC,QAAQJ,OAAOK,YAAYC,QAAQL,EAAMM,cAAc,OAAQH,QAAQI,UAAUC,WAChGC,EAAaN,QAAQJ,OAAOW,YAAYV,EAAO,OAAQG,QAAQJ,OAAOY,eAC3E,eAEKV,EAAOC,EAAc,qBAAsBO,EAAY,MAC3D,OAAOR,GAGTF,EAAO,cAAgB,SAASC,GAC9B,IAAIE,EAAeC,QAAQJ,OAAOK,YAAYC,QAAQL,EAAMM,cAAc,QAASH,QAAQI,UAAUC,WACjGC,EAAaN,QAAQJ,OAAOW,YAAYV,EAAO,OAAQG,QAAQJ,OAAOY,eAC3E,GAEKV,EAAOC,EAAc,WAAYO,EAAY,MACjD,OAAOR,GAGTF,EAAO,aAAe,SAASC,GAC7B,IAAIE,EAAeC,QAAQJ,OAAOK,YAAYC,QAAQL,EAAMM,cAAc,OAAQH,QAAQI,UAAUC,WAChGC,EAAaN,QAAQJ,OAAOW,YAAYV,EAAO,OAAQG,QAAQJ,OAAOY,eAC3E,GAEKV,EAAOC,EAAc,wBAAyBO,EAAY,MAC9D,OAAOR,GAGTF,EAAO,cAAgB,SAASC,GAC9B,IAAIE,EAAeC,QAAQJ,OAAOK,YAAYC,QAAQL,EAAMM,cAAc,OAAQH,QAAQI,UAAUC,WAChGC,EAAaN,QAAQJ,OAAOW,YAAYV,EAAO,OAAQG,QAAQJ,OAAOY,eAC3E,GAEKV,EAAOC,EAAc,SAAUO,EAAY,MAC/C,OAAOR,GAGTF,EAAO,cAAgB,SAASC,GAC9B,IAAIE,EAAeC,QAAQJ,OAAOK,YAAYC,QAAQL,EAAMM,cAAc,OAAQH,QAAQI,UAAUC,WAEhGP,EAAOC,EAAc,YACzB,OAAOD,GAGTF,EAAO,iBAAmB,SAASC,GACjC,IAAIY,EAAoBT,QAAQJ,OAAOK,YAAYC,QAAQL,EAAMM,cAAc,OAAQH,QAAQI,UAAUC,WAErGP,EAAOW,EAAmB,WAE9B,MAAO,CAACX,EAAME,QAAQJ,OAAOY,eA1EjC","file":"js/chunk-2d0e9996.b1b702c6.js","sourcesContent":["export default function define(Python: Blockly.BlockGenerators) {\n\n\n  Python['import_audio'] = function (block) {\n    const code = 'import audioio\\n';\n    return code;\n  };\n\n  Python['audio_conf'] = function(block) {\n    var variable_pin = Blockly.Python.variableDB_.getName(block.getFieldValue('pin'), Blockly.Variables.NAME_TYPE);\n    var text_pinno = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC)\n|| '';\n    // TODO: Assemble Python into code variable.\n    var code = variable_pin+ ' = audioio.AudioOut(' +text_pinno+ ')\\n';\n    return code;\n  };\n\n  Python['audio_wav'] = function(block) {\n    var variable_pin = Blockly.Python.variableDB_.getName(block.getFieldValue('pin'), Blockly.Variables.NAME_TYPE);\n    var text_pinno = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC)\n|| '';\n    // TODO: Assemble Python into code variable.\n    var code = variable_pin+ ' = audioio.WaveFile(' +text_pinno+ ')\\n';\n    return code;\n  };\n\n  Python['audio_enable'] = function(block) {\n    var variable_pin = Blockly.Python.variableDB_.getName(block.getFieldValue('pin'), Blockly.Variables.NAME_TYPE);\n    var text_pinno = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC)\n|| 'value = True';\n    // TODO: Assemble Python into code variable.\n    var code = variable_pin+ '.switch_to_output(' +text_pinno+ ')\\n';\n    return code;\n  };\n\n  Python['audio_open'] = function(block) {\n    var variable_pin = Blockly.Python.variableDB_.getName(block.getFieldValue('data'), Blockly.Variables.NAME_TYPE);\n    var text_pinno = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC)\n|| '';\n    // TODO: Assemble Python into code variable.\n    var code = variable_pin+ ' = open(' +text_pinno+ ')\\n';\n    return code;\n  };\n\n  Python['audio_raw'] = function(block) {\n    var variable_pin = Blockly.Python.variableDB_.getName(block.getFieldValue('pin'), Blockly.Variables.NAME_TYPE);\n    var text_pinno = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC)\n|| '';\n    // TODO: Assemble Python into code variable.\n    var code = variable_pin+ ' = audioio.RawSample(' +text_pinno+ ')\\n';\n    return code;\n  };\n\n  Python['audio_play'] = function(block) {\n    var variable_pin = Blockly.Python.variableDB_.getName(block.getFieldValue('pin'), Blockly.Variables.NAME_TYPE);\n    var text_pinno = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC)\n|| '';\n    // TODO: Assemble Python into code variable.\n    var code = variable_pin+ '.play(' +text_pinno+ ')\\n';\n    return code;\n  };\n\n  Python['audio_stop'] = function(block) {\n    var variable_pin = Blockly.Python.variableDB_.getName(block.getFieldValue('pin'), Blockly.Variables.NAME_TYPE);\n    // TODO: Assemble Python into code variable.\n    var code = variable_pin+ '.stop()\\n';\n    return code;\n  };\n\n  Python['audio_playing'] = function(block) {\n    var variable_variable = Blockly.Python.variableDB_.getName(block.getFieldValue('pin'), Blockly.Variables.NAME_TYPE);\n    // TODO: Assemble Python into code variable.\n    var code = variable_variable+ '.playing';\n    // TODO: Change ORDER_NONE to the correct strength.\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  };\n\n}\n"],"sourceRoot":""}