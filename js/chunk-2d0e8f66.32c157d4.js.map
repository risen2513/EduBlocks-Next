{"version":3,"sources":["webpack:///./src/blocks/python/logic/definitions.ts"],"names":["define","Blocks","init","this","appendDummyInput","appendField","appendValueInput","setCheck","appendStatementInput","setInputsInline","setPreviousStatement","setNextStatement","setColour","setTooltip","setHelpUrl","ltrOperators","OPERATORS","Blockly","FieldDropdown","setOutput","setOutputShape","OUTPUT_SHAPE_ROUND"],"mappings":"kHAAc,SAAUA,EAAOC,GAE7BA,EAAO,eAAiB,CACtBC,KAAM,WACJC,KAAKC,mBACFC,YAAY,MACfF,KAAKG,iBAAiB,UACnBC,SAAS,WACZJ,KAAKC,mBACFC,YAAY,KACfF,KAAKK,qBAAqB,WACvBD,SAAS,MACZJ,KAAKM,iBAAgB,GACrBN,KAAKO,sBAAqB,EAAM,MAChCP,KAAKQ,kBAAiB,EAAM,MAC5BR,KAAKS,UAAU,WACfT,KAAKU,WAAW,8BAChBV,KAAKW,WAAW,MAIpBb,EAAO,iBAAmB,CACxBC,KAAM,WACJC,KAAKC,mBACFC,YAAY,QACfF,KAAKG,iBAAiB,UACnBC,SAAS,MACZJ,KAAKC,mBACFC,YAAY,KACfF,KAAKK,qBAAqB,WACvBD,SAAS,MACZJ,KAAKM,iBAAgB,GACrBN,KAAKO,sBAAqB,EAAM,MAChCP,KAAKQ,kBAAiB,EAAM,MAC5BR,KAAKS,UAAU,WACfT,KAAKU,WAAW,gCAChBV,KAAKW,WAAW,MAIpBb,EAAO,WAAa,CAClBC,KAAM,WACJC,KAAKC,mBACFC,YAAY,SACfF,KAAKK,qBAAqB,MACvBH,YAAY,IACfF,KAAKO,sBAAqB,EAAM,MAChCP,KAAKQ,kBAAiB,EAAM,MAC5BR,KAAKS,UAAU,WACfT,KAAKU,WAAW,kBAChBV,KAAKW,WAAW,MAIpBb,EAAO,eAAiB,CACtBC,KAAM,WAUA,IAAIa,EAAe,CACjB,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,IAAK,KACN,CAAC,KAAM,MACP,CAAC,IAAK,KACN,CAAC,KAAM,OAELC,EAAYD,EACpBZ,KAAKG,iBAAiB,SACjBC,SAAS,MACdJ,KAAKC,mBACAC,YAAY,IAAIY,QAAQC,cAAcF,GAAY,UACvDb,KAAKG,iBAAiB,QACjBC,SAAS,MACdJ,KAAKM,iBAAgB,GACrBN,KAAKgB,WAAU,EAAM,MACrBhB,KAAKiB,eAAeH,QAAQI,oBAC5BlB,KAAKS,UAAU,WACfT,KAAKU,WAAW,IAChBV,KAAKW,WAAW,MAIpBb,EAAO,YAAc,CACnBC,KAAM,WACJC,KAAKG,iBAAiB,SACjBC,SAAS,MACdJ,KAAKC,mBACAC,YAAY,IAAIY,QAAQC,cAAc,CAAC,CAAC,MAAO,OAAQ,CAAC,KAAM,QAAS,UAC5Ef,KAAKG,iBAAiB,QACjBC,SAAS,MACdJ,KAAKM,iBAAgB,GACrBN,KAAKgB,WAAU,EAAM,MACrBhB,KAAKiB,eAAeH,QAAQI,oBAC5BlB,KAAKS,UAAU,WACfT,KAAKU,WAAW,IAChBV,KAAKW,WAAW,MAIpBb,EAAO,UAAY,CACjBC,KAAM,WACJC,KAAKC,mBACFC,YAAY,OACfF,KAAKG,iBAAiB,QACnBC,SAAS,MACZJ,KAAKM,iBAAgB,GACrBN,KAAKgB,WAAU,EAAM,MACrBhB,KAAKiB,eAAeH,QAAQI,oBAC5BlB,KAAKS,UAAU,WACfT,KAAKU,WAAW,2BAChBV,KAAKW,WAAW,MArHtB","file":"js/chunk-2d0e8f66.32c157d4.js","sourcesContent":["export default function define(Blocks: Blockly.BlockDefinitions) {\n\n  Blocks['webifinline'] = {\n    init: function () {\n      this.appendDummyInput()\n        .appendField('if');\n      this.appendValueInput(\"iftext\")\n        .setCheck(\"Boolean\");\n      this.appendDummyInput()\n        .appendField(':');\n      this.appendStatementInput('ifstate')\n        .setCheck(null);\n      this.setInputsInline(true);\n      this.setPreviousStatement(true, null);\n      this.setNextStatement(true, null);\n      this.setColour(\"#49B04D\");\n      this.setTooltip('If block with inline input');\n      this.setHelpUrl('');\n    },\n  };\n\n  Blocks['webelifinline'] = {\n    init: function () {\n      this.appendDummyInput()\n        .appendField('elif');\n      this.appendValueInput('iftext')\n        .setCheck(null)\n      this.appendDummyInput()\n        .appendField(':');\n      this.appendStatementInput('ifstate')\n        .setCheck(null);\n      this.setInputsInline(true);\n      this.setPreviousStatement(true, null);\n      this.setNextStatement(true, null);\n      this.setColour(\"#49B04D\");\n      this.setTooltip('ElIf block with inline input');\n      this.setHelpUrl('');\n    },\n  };\n\n  Blocks['webelse'] = {\n    init: function () {\n      this.appendDummyInput()\n        .appendField('else:');\n      this.appendStatementInput('DO')\n        .appendField('');\n      this.setPreviousStatement(true, null);\n      this.setNextStatement(true, null);\n      this.setColour(\"#49B04D\");\n      this.setTooltip('Else statement');\n      this.setHelpUrl('');\n    },\n  };\n  \n  Blocks['webinternal'] = {\n    init: function() {\n        // should you translate to other languages\n        // var rtlOperators = [\n        //     // ['=', 'EQ'],\n        //     // ['\\u2260', 'NEQ'],\n        //     ['\\u200F<\\u200F', 'LT'],\n        //     ['\\u200F\\u2264\\u200F', 'LTE'],\n        //     ['\\u200F>\\u200F', 'GT'],\n        //     ['\\u200F\\u2265\\u200F', 'GTE']\n        //   ];\n          var ltrOperators = [\n            ['==', '=='],\n            ['!=', '!='],\n            ['<', '<'],\n            ['<=', '<='],\n            ['>', '>'],\n            ['>=', '>=']\n          ];\n          var OPERATORS = ltrOperators;\n      this.appendValueInput(\"first\")\n          .setCheck(null);\n      this.appendDummyInput()\n          .appendField(new Blockly.FieldDropdown(OPERATORS), \"choose\")\n      this.appendValueInput(\"last\")\n          .setCheck(null);\n      this.setInputsInline(true);\n      this.setOutput(true, null);\n      this.setOutputShape(Blockly.OUTPUT_SHAPE_ROUND);\n      this.setColour(\"#49B04D\");\n      this.setTooltip(\"\");\n      this.setHelpUrl(\"\");\n    }\n  };\n\n  Blocks['webandor'] = {\n    init: function() {\n      this.appendValueInput(\"first\")\n          .setCheck(null);\n      this.appendDummyInput()\n          .appendField(new Blockly.FieldDropdown([[\"and\", \"and\"], [\"or\", \"or\"]]), \"choose\")\n      this.appendValueInput(\"last\")\n          .setCheck(null);\n      this.setInputsInline(true);\n      this.setOutput(true, null);\n      this.setOutputShape(Blockly.OUTPUT_SHAPE_ROUND);\n      this.setColour(\"#49B04D\");\n      this.setTooltip(\"\");\n      this.setHelpUrl(\"\");\n    }\n  };\n\n  Blocks['webnot'] = {\n    init: function () {\n      this.appendDummyInput()\n        .appendField('not'); \n      this.appendValueInput(\"bool\")\n        .setCheck(null);\n      this.setInputsInline(true);\n      this.setOutput(true, null);\n      this.setOutputShape(Blockly.OUTPUT_SHAPE_ROUND);\n      this.setColour(\"#49B04D\");\n      this.setTooltip('negates a Boolean value');\n      this.setHelpUrl('');\n    },\n  };\n\n  \n}\n\n"],"sourceRoot":""}