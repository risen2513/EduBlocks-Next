{"version":3,"sources":["webpack:///./src/blocks/circuitpython/analog/definitions.ts"],"names":["define","Blocks","init","this","appendDummyInput","appendField","setPreviousStatement","setNextStatement","setColour","setTooltip","setHelpUrl","Blockly","FieldVariable","appendValueInput","setCheck","setOutput","setOutputShape","OUTPUT_SHAPE_ROUND"],"mappings":"gHAAc,SAAUA,EAAOC,GAC7BA,EAAO,mBAAqB,CAC1BC,KAAM,WACJC,KAAKC,mBACFC,YAAY,0BACfF,KAAKG,sBAAqB,EAAM,MAChCH,KAAKI,kBAAiB,EAAM,MAC5BJ,KAAKK,UAAU,WACfL,KAAKM,WAAW,kCAChBN,KAAKO,WAAW,MAIpBT,EAAO,aAAe,CACpBC,KAAM,WACJC,KAAKC,mBACAC,YAAY,IAAIM,QAAQC,cAAc,YAAa,OACnDP,YAAY,gBACjBF,KAAKU,iBAAiB,QACjBC,SAAS,MACdX,KAAKC,mBACAC,YAAY,KACjBF,KAAKG,sBAAqB,EAAM,MAChCH,KAAKI,kBAAiB,EAAM,MAC5BJ,KAAKK,UAAU,WAClBL,KAAKM,WAAW,IAChBN,KAAKO,WAAW,MAIjBT,EAAO,cAAgB,CACrBC,KAAM,WACJC,KAAKC,mBACAC,YAAY,IAAIM,QAAQC,cAAc,cAAe,OACrDP,YAAY,iBACjBF,KAAKU,iBAAiB,QACjBC,SAAS,MACdX,KAAKC,mBACAC,YAAY,KACjBF,KAAKG,sBAAqB,EAAM,MAChCH,KAAKI,kBAAiB,EAAM,MAC5BJ,KAAKK,UAAU,WAClBL,KAAKM,WAAW,IAChBN,KAAKO,WAAW,MAIjBT,EAAO,kBAAoB,CACzBC,KAAM,WACJC,KAAKC,mBACAC,YAAY,IAAIM,QAAQC,cAAc,OAAQ,OAC9CP,YAAY,aACjBF,KAAKU,iBAAiB,QACjBC,SAAS,MACdX,KAAKC,mBACLD,KAAKG,sBAAqB,EAAM,MAChCH,KAAKI,kBAAiB,EAAM,MAC5BJ,KAAKK,UAAU,WAClBL,KAAKM,WAAW,IAChBN,KAAKO,WAAW,MAIjBT,EAAO,aAAe,CACpBC,KAAM,WACJC,KAAKC,mBACAC,YAAY,IAAIM,QAAQC,cAAc,OAAQ,OAC9CP,YAAY,UACjBF,KAAKY,WAAU,EAAM,MACrBZ,KAAKK,UAAU,WACfL,KAAKa,eAAeL,QAAQM,oBAC/Bd,KAAKM,WAAW,IAChBN,KAAKO,WAAW,MAxEnB","file":"js/chunk-2d21e38b.4c4f30f3.js","sourcesContent":["export default function define(Blocks: Blockly.BlockDefinitions) {\n  Blocks['import_analogio'] = {\n    init: function () {\n      this.appendDummyInput()\n        .appendField('from analogio import *');\n      this.setPreviousStatement(true, null);\n      this.setNextStatement(true, null);\n      this.setColour(\"#E67D21\");\n      this.setTooltip('Imports the DigitalIO library.');\n      this.setHelpUrl('');\n    },\n  };\n\n  Blocks['analog_in'] = {\n    init: function() {\n      this.appendDummyInput()\n          .appendField(new Blockly.FieldVariable(\"analogin\"), \"pin\")\n          .appendField(\" = AnalogIn(\")\n      this.appendValueInput(\"text\")\n          .setCheck(null);\n      this.appendDummyInput()\n          .appendField(\")\");\n      this.setPreviousStatement(true, null);\n      this.setNextStatement(true, null);\n      this.setColour(\"#E67D21\");\n   this.setTooltip(\"\");\n   this.setHelpUrl(\"\");\n    }\n  };\n\n  Blocks['analog_out'] = {\n    init: function() {\n      this.appendDummyInput()\n          .appendField(new Blockly.FieldVariable(\"analog_out\"), \"pin\")\n          .appendField(\" = AnalogOut(\")\n      this.appendValueInput(\"text\")\n          .setCheck(null);\n      this.appendDummyInput()\n          .appendField(\")\");\n      this.setPreviousStatement(true, null);\n      this.setNextStatement(true, null);\n      this.setColour(\"#E67D21\");\n   this.setTooltip(\"\");\n   this.setHelpUrl(\"\");\n    }\n  };\n\n  Blocks['analogpinvalue'] = {\n    init: function() {\n      this.appendDummyInput()\n          .appendField(new Blockly.FieldVariable(\"pin\"), \"pin\")\n          .appendField(\".value = \")\n      this.appendValueInput(\"text\")\n          .setCheck(null);\n      this.appendDummyInput()\n      this.setPreviousStatement(true, null);\n      this.setNextStatement(true, null);\n      this.setColour(\"#E67D21\");\n   this.setTooltip(\"\");\n   this.setHelpUrl(\"\");\n    }\n  };\n\n  Blocks['valinline'] = {\n    init: function() {\n      this.appendDummyInput()\n          .appendField(new Blockly.FieldVariable(\"pin\"), \"pin\")\n          .appendField(\".value\");\n      this.setOutput(true, null);\n      this.setColour(\"#E67D21\");\n      this.setOutputShape(Blockly.OUTPUT_SHAPE_ROUND);\n   this.setTooltip(\"\");\n   this.setHelpUrl(\"\");\n    }\n  };\n\n}"],"sourceRoot":""}