{"version":3,"sources":["webpack:///./src/blocks/circuitpython/advanced/generators.ts"],"names":["define","Python","block","code","Blockly","ORDER_ATOMIC","value_text1","valueToCode","value_text2"],"mappings":"kHAAc,SAAUA,EAAOC,GAI7BA,EAAO,gBAAkB,SAAUC,GACjC,MAAMC,EAAO,2BACb,OAAOA,GAGTF,EAAO,WAAa,SAASC,GAC3B,IAAIC,EAAO,kCACX,MAAO,CAACA,EAAMC,QAAQH,OAAOI,eAK/BJ,EAAO,kBAAoB,SAAUC,GACnC,MAAMC,EAAO,mBACb,OAAOA,GAGTF,EAAO,mBAAqB,SAASC,GACnC,IAAII,EAAcF,QAAQH,OAAOM,YAAYL,EAAO,QAASE,QAAQH,OAAOI,cACxEG,EAAcJ,QAAQH,OAAOM,YAAYL,EAAO,QAASE,QAAQH,OAAOI,cAExEF,EAAO,mBAAoBG,EAAa,KAAOE,EAAa,MAChE,OAAOL,GAGTF,EAAO,QAAU,SAASC,GACxB,IAAII,EAAcF,QAAQH,OAAOM,YAAYL,EAAO,QAASE,QAAQH,OAAOI,cACxEG,EAAcJ,QAAQH,OAAOM,YAAYL,EAAO,QAASE,QAAQH,OAAOI,cAExEF,EAAO,QAASG,EAAa,KAAOE,EAAa,IAErD,MAAO,CAACL,EAAMC,QAAQH,OAAOI,eAG/BJ,EAAO,SAAW,SAASC,GACzB,IAAII,EAAcF,QAAQH,OAAOM,YAAYL,EAAO,QAASE,QAAQH,OAAOI,cACxEG,EAAcJ,QAAQH,OAAOM,YAAYL,EAAO,QAASE,QAAQH,OAAOI,cAExEF,EAAOG,EAAc,UAAWE,EAAa,MACjD,OAAOL,GA3CX","file":"js/chunk-2d0a4991.df427460.js","sourcesContent":["export default function define(Python: Blockly.BlockGenerators) {\n\n  // CPU Temp \n\n  Python['import_micro'] = function (block) {\n    const code = 'import microcontroller\\n';\n    return code;\n  };\n\n  Python['cputemp'] = function(block) {\n    var code = 'microcontroller.cpu.temperature';\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  };\n\n  // Storage\n\n  Python['import_storage'] = function (block) {\n    const code = 'import storage\\n';\n    return code;\n  };\n\n  Python['storage_remount'] = function(block) {\n    var value_text1 = Blockly.Python.valueToCode(block, 'text1', Blockly.Python.ORDER_ATOMIC);\n    var value_text2 = Blockly.Python.valueToCode(block, 'text2', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = 'storage.remount(' +value_text1+ ', '  +value_text2+ ')\\n';\n    return code;\n  };\n\n  Python['open'] = function(block) {\n    var value_text1 = Blockly.Python.valueToCode(block, 'text1', Blockly.Python.ORDER_ATOMIC);\n    var value_text2 = Blockly.Python.valueToCode(block, 'text2', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = 'open(' +value_text1+ ', '  +value_text2+ ')';\n    // TODO: Change ORDER_NONE to the correct strength.\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  };\n\n  Python['write'] = function(block) {\n    var value_text1 = Blockly.Python.valueToCode(block, 'text1', Blockly.Python.ORDER_ATOMIC);\n    var value_text2 = Blockly.Python.valueToCode(block, 'text2', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = value_text1 + '.write(' +value_text2+ ')\\n';\n    return code;\n  };\n\n}\n"],"sourceRoot":""}