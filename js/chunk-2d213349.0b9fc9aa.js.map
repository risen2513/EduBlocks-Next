{"version":3,"sources":["webpack:///./src/blocks/python/definitions/generators.ts"],"names":["define","Python","block","text_1","Blockly","valueToCode","ORDER_ATOMIC","text_2","branch","statementToCode","addLoopTrap","id","PASS","code","value_def","value_input","text_return","variable_name","variableDB_","getName","getFieldValue","Variables","NAME_TYPE","text_text","value_name","text_const"],"mappings":"gHAAc,SAAUA,EAAOC,GAE7BA,EAAO,aAAe,SAAUC,GAC9B,MAAMC,EAASC,QAAQH,OAAOI,YAAYH,EAAO,IAAKE,QAAQH,OAAOK,cAC/DC,EAASH,QAAQH,OAAOI,YAAYH,EAAO,IAAKE,QAAQH,OAAOK,cACrE,IAAIE,EAASJ,QAAQH,OAAOQ,gBAAgBP,EAAO,MACnDM,EAASJ,QAAQH,OAAOS,YAAYF,EAAQN,EAAMS,KAAOP,QAAQH,OAAOW,KAGxE,MAAMC,EAAO,OAASV,EAAS,IAAMI,EAAS,OAASC,EACvD,OAAOK,GAGTZ,EAAO,cAAgB,SAASC,GAC9B,IAAIY,EAAYV,QAAQH,OAAOI,YAAYH,EAAO,MAAOE,QAAQH,OAAOK,cACpES,EAAcX,QAAQH,OAAOI,YAAYH,EAAO,QAASE,QAAQH,OAAOK,cAExEO,EAAOC,EAAY,IAAKC,EAAa,IAEzC,MAAO,CAACF,EAAMT,QAAQH,OAAOK,eAG/BL,EAAO,cAAgB,SAAUC,GAC/B,MAAMc,EAAcZ,QAAQH,OAAOI,YAAYH,EAAO,SAAUE,QAAQH,OAAOK,cAEzEO,EAAO,UAAYG,EAAc,KACvC,OAAOH,GAGTZ,EAAO,QAAU,SAASC,GACxB,IAAIe,EAAgBb,QAAQH,OAAOiB,YAAYC,QAAQjB,EAAMkB,cAAc,OAAQhB,QAAQiB,UAAUC,WACjGC,EAAYrB,EAAMkB,cAAc,QAChCI,EAAapB,QAAQH,OAAOI,YAAYH,EAAO,SAAUE,QAAQH,OAAOK,cAExEO,EAAO,QAAUI,EAAgB,IAAKM,EAAW,IAAKC,EAAY,KACtE,OAAOX,GAGTZ,EAAO,YAAc,SAAUC,GAC7B,MAAMuB,EAAarB,QAAQH,OAAOI,YAAYH,EAAO,QAASE,QAAQH,OAAOK,cAC7E,IAAIE,EAASJ,QAAQH,OAAOQ,gBAAgBP,EAAO,MAEnD,OADAM,EAASJ,QAAQH,OAAOS,YAAYF,EAAQN,EAAMS,KAAOP,QAAQH,OAAOW,KACjE,SAAWa,EAAa,MAAQjB,GA1C3C","file":"js/chunk-2d213349.0b9fc9aa.js","sourcesContent":["export default function define(Python: Blockly.BlockGenerators) {\n\n  Python['webdefine'] = function (block) {\n    const text_1 = Blockly.Python.valueToCode(block, '1', Blockly.Python.ORDER_ATOMIC)\n    const text_2 = Blockly.Python.valueToCode(block, '2', Blockly.Python.ORDER_ATOMIC)\n    let branch = Blockly.Python.statementToCode(block, 'DO');\n    branch = Blockly.Python.addLoopTrap(branch, block.id) || Blockly.Python.PASS;\n    // const statements_name = Blockly.Python.statementToCode(block, 'NAME');\n    // TODO: Assemble Python into code variable.\n    const code = 'def ' + text_1 + '(' + text_2 + '):\\n' + branch;\n    return code;\n  };\n\n  Python['inline_def'] = function(block) {\n    var value_def = Blockly.Python.valueToCode(block, 'def', Blockly.Python.ORDER_ATOMIC);\n    var value_input = Blockly.Python.valueToCode(block, 'input', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = value_def + '(' +value_input+ ')';\n    // TODO: Change ORDER_NONE to the correct strength.\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  };\n\n  Python['webreturn2'] = function (block) {\n    const text_return = Blockly.Python.valueToCode(block, 'return', Blockly.Python.ORDER_ATOMIC)\n    // TODO: Assemble Python into code variable.\n    const code = 'return ' + text_return + '\\n';\n    return code;\n  };\n\n  Python['self'] = function(block) {\n    var variable_name = Blockly.Python.variableDB_.getName(block.getFieldValue('VAR'), Blockly.Variables.NAME_TYPE);\n    var text_text = block.getFieldValue('NAME');\n    var value_name = Blockly.Python.valueToCode(block, 'varset', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = 'self.' + variable_name + ' ' +text_text+ ' ' +value_name+ '\\n';\n    return code;\n  };\n\n  Python['webclass'] = function (block) {\n    const text_const = Blockly.Python.valueToCode(block, 'class', Blockly.Python.ORDER_ATOMIC);\n    let branch = Blockly.Python.statementToCode(block, 'DO');\n    branch = Blockly.Python.addLoopTrap(branch, block.id) || Blockly.Python.PASS;\n    return 'class ' + text_const + ':\\n' + branch;\n  };\n\n}\n"],"sourceRoot":""}