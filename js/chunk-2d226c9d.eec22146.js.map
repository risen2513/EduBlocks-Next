{"version":3,"sources":["webpack:///./src/blocks/microbit/pins/generators.ts"],"names":["define","Python","block","text_pinno","Blockly","valueToCode","ORDER_ATOMIC","code","text_analog","text_digital","getFieldValue"],"mappings":"gHAAc,SAAUA,EAAOC,GAG7BA,EAAO,iBAAmB,SAASC,GACjC,IAAIC,EAAaC,QAAQH,OAAOI,YAAYH,EAAO,OAAQE,QAAQH,OAAOK,eACvE,OAECC,EAAO,MAAMJ,EAAW,gBAE5B,MAAO,CAACI,EAAMH,QAAQH,OAAOK,eAG/BL,EAAO,eAAiB,SAASC,GAE/B,IAAIK,EAAO,wBAEX,MAAO,CAACA,EAAMH,QAAQH,OAAOK,eAG/BL,EAAO,eAAiB,SAASC,GAE/B,IAAIK,EAAO,cAEX,MAAO,CAACA,EAAMH,QAAQH,OAAOK,eAG/BL,EAAO,iBAAmB,SAASC,GACjC,IAAIC,EAAaC,QAAQH,OAAOI,YAAYH,EAAO,OAAQE,QAAQH,OAAOK,eACvE,OAECC,EAAO,MAAMJ,EAAW,iBAE5B,MAAO,CAACI,EAAMH,QAAQH,OAAOK,eAG/BL,EAAO,kBAAoB,SAASC,GAClC,IAAIC,EAAaC,QAAQH,OAAOI,YAAYH,EAAO,OAAQE,QAAQH,OAAOK,eACvE,OAECC,EAAO,MAAMJ,EAAW,kBAE5B,MAAO,CAACI,EAAMH,QAAQH,OAAOK,eAG/BL,EAAO,kBAAoB,SAASC,GAClC,IAAIC,EAAaC,QAAQH,OAAOI,YAAYH,EAAO,OAAQE,QAAQH,OAAOK,eACvE,OACCE,EAAcJ,QAAQH,OAAOI,YAAYH,EAAO,QAASE,QAAQH,OAAOK,eACzE,OAECC,EAAO,MAAOJ,EAAY,iBAAkBK,EAAa,MAC7D,OAAOD,GAGTN,EAAO,mBAAqB,SAASC,GACnC,IAAIC,EAAaC,QAAQH,OAAOI,YAAYH,EAAO,OAAQE,QAAQH,OAAOK,eACvE,OACCG,EAAeL,QAAQH,OAAOI,YAAYH,EAAO,QAASE,QAAQH,OAAOK,eAC1E,OAECC,EAAO,MAAOJ,EAAY,kBAAmBM,EAAc,MAC/D,OAAOF,GAGTN,EAAO,YAAc,SAASC,GAC5B,IAAIC,EAAaC,QAAQH,OAAOI,YAAYH,EAAO,OAAQE,QAAQH,OAAOK,eACvE,OACCG,EAAeL,QAAQH,OAAOI,YAAYH,EAAO,QAASE,QAAQH,OAAOK,eAC1E,OAECC,EAAO,MAAOJ,EAAY,aAAcM,EAAc,MAC1D,OAAOF,GAGTN,EAAO,cAAgB,SAASC,GAC9B,IAAIC,EAAaD,EAAMQ,cAAc,SAEjCH,EAAO,MAAMJ,EAAW,gBAE5B,MAAO,CAACI,EAAMH,QAAQH,OAAOK,eAG/BL,EAAO,cAAgB,SAASC,GAC9B,IAAIC,EAAaD,EAAMQ,cAAc,SAEjCH,EAAO,MAAMJ,EAAW,iBAE5B,MAAO,CAACI,EAAMH,QAAQH,OAAOK,eAG/BL,EAAO,eAAiB,SAASC,GAC/B,IAAIC,EAAaD,EAAMQ,cAAc,SAEjCH,EAAO,MAAMJ,EAAW,kBAE5B,MAAO,CAACI,EAAMH,QAAQH,OAAOK,eAG/BL,EAAO,eAAiB,SAASC,GAC/B,IAAIC,EAAaD,EAAMQ,cAAc,SACjCF,EAAcN,EAAMQ,cAAc,UAElCH,EAAO,MAAOJ,EAAY,iBAAkBK,EAAa,MAC7D,OAAOD,GAGTN,EAAO,gBAAkB,SAASC,GAChC,IAAIC,EAAaD,EAAMQ,cAAc,SACjCD,EAAeP,EAAMQ,cAAc,WAEnCH,EAAO,MAAOJ,EAAY,kBAAmBM,EAAc,MAC/D,OAAOF,GA/GX","file":"js/chunk-2d226c9d.eec22146.js","sourcesContent":["export default function define(Python: Blockly.BlockGenerators) {\n\n\n  Python['pintouchednew'] = function(block) {\n    var text_pinno = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC)\n    || 'True';\n    // TODO: Assemble Python into code variable.\n    var code = 'pin'+text_pinno+'.is_touched()';\n    // TODO: Change ORDER_NONE to the correct strength.\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  };\n\n  Python['logotouched'] = function(block) {\n    // TODO: Assemble Python into code variable.\n    var code = 'pin_logo.is_touched()';\n    // TODO: Change ORDER_NONE to the correct strength.\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  };\n\n  Python['pin_speaker'] = function(block) {\n    // TODO: Assemble Python into code variable.\n    var code = 'pin_speaker';\n    // TODO: Change ORDER_NONE to the correct strength.\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  };\n\n  Python['analogreadnew'] = function(block) {\n    var text_pinno = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC)\n    || 'True';\n    // TODO: Assemble Python into code variable.\n    var code = 'pin'+text_pinno+'.read_analog()';\n    // TODO: Change ORDER_NONE to the correct strength.\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  };\n\n  Python['digitalreadnew'] = function(block) {\n    var text_pinno = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC)\n    || 'True';\n    // TODO: Assemble Python into code variable.\n    var code = 'pin'+text_pinno+'.read_digital()';\n    // TODO: Change ORDER_NONE to the correct strength.\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  };\n\n  Python['writeanalognew'] = function(block) {\n    var text_pinno = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC)\n    || 'True';\n    var text_analog = Blockly.Python.valueToCode(block, 'text1', Blockly.Python.ORDER_ATOMIC)\n    || 'True';\n    // TODO: Assemble Python into code variable.\n    var code = 'pin' +text_pinno+ '.write_analog(' +text_analog+ ')\\n';\n    return code;\n  };\n  \n  Python['writedigitalnew'] = function(block) {\n    var text_pinno = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC)\n    || 'True';\n    var text_digital = Blockly.Python.valueToCode(block, 'text1', Blockly.Python.ORDER_ATOMIC)\n    || 'True';\n    // TODO: Assemble Python into code variable.\n    var code = 'pin' +text_pinno+ '.write_digital(' +text_digital+ ')\\n';\n    return code;\n  };\n  \n  Python['pin_pull'] = function(block) {\n    var text_pinno = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC)\n    || 'True';\n    var text_digital = Blockly.Python.valueToCode(block, 'text1', Blockly.Python.ORDER_ATOMIC)\n    || 'True';\n    // TODO: Assemble Python into code variable.\n    var code = 'pin' +text_pinno+ '.set_pull(' +text_digital+ ')\\n';\n    return code;\n  };\n\n  Python['pintouched'] = function(block) {\n    var text_pinno = block.getFieldValue('pinno');\n    // TODO: Assemble Python into code variable.\n    var code = 'pin'+text_pinno+'.is_touched()';\n    // TODO: Change ORDER_NONE to the correct strength.\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  };\n\n  Python['analogread'] = function(block) {\n    var text_pinno = block.getFieldValue('pinno');\n    // TODO: Assemble Python into code variable.\n    var code = 'pin'+text_pinno+'.read_analog()';\n    // TODO: Change ORDER_NONE to the correct strength.\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  };\n\n  Python['digitalread'] = function(block) {\n    var text_pinno = block.getFieldValue('pinno');\n    // TODO: Assemble Python into code variable.\n    var code = 'pin'+text_pinno+'.read_digital()';\n    // TODO: Change ORDER_NONE to the correct strength.\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  };\n\n  Python['writeanalog'] = function(block) {\n    var text_pinno = block.getFieldValue('pinno');\n    var text_analog = block.getFieldValue('analog');\n    // TODO: Assemble Python into code variable.\n    var code = 'pin' +text_pinno+ '.write_analog(' +text_analog+ ')\\n';\n    return code;\n  };\n  \n  Python['writedigital'] = function(block) {\n    var text_pinno = block.getFieldValue('pinno');\n    var text_digital = block.getFieldValue('digital');\n    // TODO: Assemble Python into code variable.\n    var code = 'pin' +text_pinno+ '.write_digital(' +text_digital+ ')\\n';\n    return code;\n  };\n}\n"],"sourceRoot":""}