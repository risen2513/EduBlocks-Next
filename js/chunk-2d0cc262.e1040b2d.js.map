{"version":3,"sources":["webpack:///./src/blocks/python/statements/definitions.ts"],"names":["define","Blocks","init","this","appendDummyInput","appendField","appendValueInput","setCheck","setInputsInline","setPreviousStatement","setNextStatement","setColour","setTooltip","setHelpUrl","Blockly","FieldTextInput","setOutput","setOutputShape","OUTPUT_SHAPE_ROUND","FieldString","FieldDropdown"],"mappings":"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","file":"js/chunk-2d0cc262.e1040b2d.js","sourcesContent":["export default function define(Blocks: Blockly.BlockDefinitions) {\n\n  Blocks['websleepnew'] = {\n    init: function() {\n      this.appendDummyInput()\n          .appendField(\"time.sleep(\");\n      this.appendValueInput(\"sleep\")\n          .setCheck(null);\n      this.appendDummyInput()\n          .appendField(\")\");\n      this.setInputsInline(true);\n      this.setPreviousStatement(true, null);\n      this.setNextStatement(true, null);\n      this.setColour('#F89621');\n      this.setTooltip(\"Wait (in milliseconds)\");\n      this.setHelpUrl(\"\");\n    }\n  };\n\n  Blocks['webtypeanything'] = {\n    init: function() {\n      this.appendValueInput(\"stuff\")\n        .setCheck(null);\n      this.appendDummyInput()   \n          .appendField(\"# your own code\");\n      this.setPreviousStatement(true, null);\n      this.setNextStatement(true, null);\n      this.setColour('#F89621');\n      this.setTooltip(\"Type any python code into this block\");\n      this.setHelpUrl(\"\");\n    }\n  };\n\n\n  Blocks['webdf'] = {\n    init: function () {\n      this.appendValueInput(\"def\")\n        .setCheck(null);\n      this.appendDummyInput()\n        .appendField('(');\n      this.appendValueInput(\"params\")\n        .setCheck(null)\n      this.appendDummyInput()\n        .appendField(')');\n      this.setPreviousStatement(true, null);\n      this.setNextStatement(true, null);\n      this.setColour('#F89621');\n      this.setTooltip('call a define function');\n      this.setHelpUrl('');\n    },\n  };\n\n  Blocks['webpass'] = {\n    init: function () {\n      this.appendDummyInput()\n        .appendField('pass');\n      this.setPreviousStatement(true, null);\n      this.setNextStatement(true, null);\n      this.setColour('#F89621');\n      this.setTooltip('Pass to the next command');\n      this.setHelpUrl('');\n    },\n  };\n\n  Blocks['webprintnew'] = {\n    init: function () {\n      this.appendDummyInput()\n        .appendField('print(\"')\n      this.appendValueInput(\"text\")\n        .setCheck(null);\n      this.appendDummyInput()\n        .appendField('\" )');\n      this.setPreviousStatement(true, null);\n      this.setNextStatement(true, null);\n      this.setColour('#F89621');\n      this.setTooltip('Use this to print a string to the output box.');\n      this.setHelpUrl('');\n    },\n  };\n\n  Blocks[\"textinline\"] = {\n    init: function() {\n      this.appendDummyInput().appendField(new Blockly.FieldTextInput(\"\"), \"text\");\n      this.setInputsInline(true);\n      this.setOutput(true, null);\n      this.setOutputShape(Blockly.OUTPUT_SHAPE_ROUND);\n      this.setColour(\"#FFFFFF\", \"#FFFFFF\", \"#FFFFFF\");\n      this.setTooltip(\"Text input for inline input\");\n      this.setHelpUrl(\"\");\n    }\n  };\n\n  Blocks[\"stringinline\"] = {\n    init: function() {\n      this.appendDummyInput().appendField(new Blockly.FieldString(\"\"), \"text\");\n      this.setInputsInline(true);\n      this.setOutput(true, null);\n      this.setOutputShape(Blockly.OUTPUT_SHAPE_ROUND);\n      this.setColour(\"#FFFFFF\", \"#FFFFFF\", \"#FFFFFF\");\n      this.setTooltip(\"String input for inline input\");\n      this.setHelpUrl(\"\");\n    }\n  };\n\n  Blocks['brackets'] = {\n    init: function() {\n      this.appendDummyInput()\n          .appendField(\"(\");\n      this.appendValueInput(\"NAME\")\n          .setCheck(null);\n      this.appendDummyInput()\n          .appendField(\")\");\n      this.setInputsInline(true);\n      this.setOutput(true, null);\n      this.setColour('#F89621');\n   this.setTooltip(\"Brackets\");\n   this.setHelpUrl(\"\");\n    }\n  };\n\n  Blocks['upper_lower'] = {\n    init: function() {\n      this.appendValueInput(\"string\")\n          .setCheck(null);\n      this.appendDummyInput()\n          .appendField(\".\")\n          .appendField(new Blockly.FieldDropdown([[\"upper\",\"upper\"], [\"lower\",\"lower\"]]), \"upperlower\")\n          .appendField(\"()\");\n      this.setInputsInline(true);\n      this.setOutput(true, null);\n      this.setColour(\"#F89621\");\n   this.setTooltip(\"Convert string to upper or lower case\");\n   this.setHelpUrl(\"\");\n    }\n  };\n\n  Blocks['global'] = {\n    init: function () {\n      this.appendDummyInput()\n        .appendField('global ');\n      this.appendValueInput(\"text\")\n        .setCheck(null);\n      this.setPreviousStatement(true, null);\n      this.setNextStatement(true, null);\n      this.setColour('#F89621');\n      this.setTooltip('Make a variable global');\n      this.setHelpUrl('');\n    },\n  };\n\n  Blocks['webvarprint'] = {\n    init: function () {\n      this.appendDummyInput()\n        .appendField('print(')\n      this.appendValueInput('var')\n        .setCheck(null);\n      this.appendDummyInput()\n        .appendField(')');\n      this.setPreviousStatement(true, null);\n      this.setNextStatement(true, null);\n      this.setColour('#F89621');\n      this.setTooltip('Use this to print a variable, a number, or even a string if you put in the quotes yourself.');\n      this.setHelpUrl('');\n    },\n  };\n\n  Blocks['webint'] = {\n    init: function () {\n      this.appendDummyInput()\n        .appendField('int(');\n      this.appendValueInput(\"bool\")\n        .setCheck(null);\n      this.appendDummyInput()\n        .appendField(\")\")\n      this.setInputsInline(true);\n      this.setOutput(true, null);\n      this.setOutputShape(Blockly.OUTPUT_SHAPE_ROUND);\n      this.setColour('#F89621');\n      this.setTooltip('Changes to an int');\n      this.setHelpUrl('');\n    },\n  };\n\n  Blocks['webcomma'] = {\n    init: function() {\n      this.appendValueInput(\"in1\")\n          .setCheck(null);\n      this.appendDummyInput()\n          .appendField(new Blockly.FieldDropdown([[\"+\",\"+\"], [\",\",\",\"]]), \"commadd\");\n      this.appendValueInput(\"in2\")\n          .setCheck(null);\n      this.setInputsInline(true);\n      this.setOutput(true, null);\n      this.setOutputShape(Blockly.OUTPUT_SHAPE_ROUND);\n      this.setColour('#F89621');\n    }\n  };\n  \n\n  Blocks['input_web'] = {\n    init: function() {\n      this.appendDummyInput()\n          .appendField(\"input(\");\n      this.appendValueInput(\"NAME\")\n          .setCheck(null);\n      this.appendDummyInput()\n          .appendField(\")\");\n      this.setInputsInline(true);\n      this.setOutput(true, null);\n      this.setOutputShape(Blockly.OUTPUT_SHAPE_ROUND);\n      this.setColour('#F89621');\n   this.setTooltip(\"\");\n   this.setHelpUrl(\"\");\n    }\n  };\n\n  Blocks['webstr'] = {\n    init: function () {\n      this.appendDummyInput()\n        .appendField('str(');\n      this.appendValueInput(\"bool\")\n        .setCheck(null);\n      this.appendDummyInput()\n        .appendField(\")\")\n      this.setInputsInline(true);\n      this.setOutput(true, null);\n      this.setOutputShape(Blockly.OUTPUT_SHAPE_ROUND);\n      this.setColour('#F89621');\n      this.setTooltip('Changes to an str');\n      this.setHelpUrl('');\n    },\n  };\n}\n\n"],"sourceRoot":""}