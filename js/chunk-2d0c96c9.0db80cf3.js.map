{"version":3,"sources":["webpack:///./src/blocks/python/requests/generators.ts"],"names":["define","Python","block","code","variable_r","Blockly","variableDB_","getName","getFieldValue","Variables","NAME_TYPE","value_text","valueToCode","ORDER_ATOMIC","value_input","dropdown_name","variable_jar","value_name"],"mappings":"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","file":"js/chunk-2d0c96c9.0db80cf3.js","sourcesContent":["export default function define(Python: Blockly.BlockGenerators) {\n  Python['import_requests'] = function (block) {\n    let code = 'import requests \\n';\n    return code;\n  };\n\n  Python['import_json'] = function (block) {\n    let code = 'import json \\n';\n    return code;\n  };\n\n  Python['requests_get'] = function (block) {\n    var variable_r = Blockly.Python.variableDB_.getName(block.getFieldValue('r'), Blockly.Variables.NAME_TYPE);\n    var value_text = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = variable_r + ' = requests.get(' + value_text + ')\\n';\n    return code;\n  };\n\n  Python['json_reference'] = function(block) {\n    var variable_r = Blockly.Python.variableDB_.getName(block.getFieldValue('r'), Blockly.Variables.NAME_TYPE);\n    var value_input = Blockly.Python.valueToCode(block, 'input', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = variable_r + '.json()[' + value_input + ']';\n    // TODO: Change ORDER_NONE to the correct strength.\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  };\n\n  Python['requests_post'] = function (block) {\n    var variable_r = Blockly.Python.variableDB_.getName(block.getFieldValue('r'), Blockly.Variables.NAME_TYPE);\n    var value_text = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = variable_r + ' = requests.post(' + value_text + ')\\n';\n    return code;\n  };\n\n  Python['requests_put'] = function (block) {\n    var variable_r = Blockly.Python.variableDB_.getName(block.getFieldValue('r'), Blockly.Variables.NAME_TYPE);\n    var value_text = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = variable_r + ' = requests.put(' + value_text + ')\\n';\n    return code;\n  };\n\n  Python['requests_delete'] = function (block) {\n    var variable_r = Blockly.Python.variableDB_.getName(block.getFieldValue('r'), Blockly.Variables.NAME_TYPE);\n    var value_text = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = variable_r + ' = requests.delete(' + value_text + ')\\n';\n    return code;\n  };\n\n  Python['requests_head'] = function (block) {\n    var variable_r = Blockly.Python.variableDB_.getName(block.getFieldValue('r'), Blockly.Variables.NAME_TYPE);\n    var value_text = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = variable_r + ' = requests.head(' + value_text + ')\\n';\n    return code;\n  };\n\n  Python['requests_options'] = function (block) {\n    var variable_r = Blockly.Python.variableDB_.getName(block.getFieldValue('r'), Blockly.Variables.NAME_TYPE);\n    var value_text = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = variable_r + ' = requests.options(' + value_text + ')\\n';\n    return code;\n  };\n\n  Python['requests_url'] = function (block) {\n    var variable_r = Blockly.Python.variableDB_.getName(block.getFieldValue('r'), Blockly.Variables.NAME_TYPE);\n    var dropdown_name = block.getFieldValue('NAME');\n    // TODO: Assemble Python into code variable.\n    var code = variable_r + '.' + dropdown_name;\n    // TODO: Change ORDER_NONE to the correct strength.\n    return [code, Blockly.Python.ORDER_ATOMIC];\n  };\n\n  Python['requests_url_func'] = function (block) {\n    var variable_r = Blockly.Python.variableDB_.getName(block.getFieldValue('r'), Blockly.Variables.NAME_TYPE);\n    var dropdown_name = block.getFieldValue('NAME');\n    // TODO: Assemble Python into code variable.\n    var code = variable_r + '.' + dropdown_name + \"()\\n\";\n    // TODO: Change ORDER_NONE to the correct strength.\n    return code;\n  };\n\n\n  Python['requests_cookies'] = function (block) {\n    var variable_r = Blockly.Python.variableDB_.getName(block.getFieldValue('r'), Blockly.Variables.NAME_TYPE);\n    var value_text = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = variable_r + '.cookies[' + value_text + ']\\n';\n    return code;\n  };\n\n  Python['requests_rjar'] = function (block) {\n    var variable_jar = Blockly.Python.variableDB_.getName(block.getFieldValue('jar'), Blockly.Variables.NAME_TYPE);\n    // TODO: Assemble Python into code variable.\n    var code = variable_jar + ' = requests.cookies.RequestsCookieJar()\\n';\n    return code;\n  };\n\n  Python['requests_jset'] = function (block) {\n    var variable_jar = Blockly.Python.variableDB_.getName(block.getFieldValue('jar'), Blockly.Variables.NAME_TYPE);\n    var value_name = Blockly.Python.valueToCode(block, 'NAME', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = variable_jar + '.set(' + value_name + ')\\n';\n    return code;\n  };\n\n  Python['requests_hget'] = function (block) {\n    var variable_r = Blockly.Python.variableDB_.getName(block.getFieldValue('r'), Blockly.Variables.NAME_TYPE);\n    var value_name = Blockly.Python.valueToCode(block, 'NAME', Blockly.Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = variable_r + '.headers.get(' + value_name + ')\\n';\n    return code;\n  };\n\n  Python['requests_raise'] = function (block) {\n    var variable_r = Blockly.Python.variableDB_.getName(block.getFieldValue('r'), Blockly.Variables.NAME_TYPE);\n    // TODO: Assemble Python into code variable.\n    var code = variable_r + '.raise_for_status()\\n';\n    return code;\n  };\n}\n"],"sourceRoot":""}