{"version":3,"sources":["webpack:///./src/blocks/circuitpython/basic/definitions.ts"],"names":["define","Blocks","maincolour","init","this","appendDummyInput","appendField","setPreviousStatement","setNextStatement","setColour","setTooltip","setHelpUrl","Blockly","BlockSvg","START_HAT","appendStatementInput","FieldTextInput","appendValueInput","setCheck","FieldDropdown","setInputsInline","setOutput","ltrOperators","OPERATORS","setOutputShape","OUTPUT_SHAPE_ROUND","FieldString","FieldSlider","FieldVariable"],"mappings":"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","file":"js/chunk-2d0b342f.e941a920.js","sourcesContent":["export default function define(Blocks: Blockly.BlockDefinitions) {\n\n  var maincolour = \"#ff0066\";\n  \n  Blocks['import_board'] = {\n    init: function () {\n      this.appendDummyInput()\n        .appendField('import board');\n      this.setPreviousStatement(true, null);\n      this.setNextStatement(true, null);\n      this.setColour(maincolour);\n      this.setTooltip('Imports the board library.');\n      this.setHelpUrl('');\n    },\n  };\n\n  Blocks['events_start_here'] = { \n    init: function() {\n      this.appendDummyInput()\n          .appendField(\"# Start code here\"); \n          // other option is \"#!/usr/bin/python3\"\n      this.setNextStatement(true, null);\n      this.setColour(\"#FFBF00\");\n      Blockly.BlockSvg.START_HAT = true;\n      // this.setTooltip(DexterMsg.Blockly.Blocks.Events.TOOLTIP_START_BLOCK);\n      // this.setHelpUrl('');\n    }\n  };\n\n  Blocks['import_time'] = {\n    init: function () {\n      this.appendDummyInput()\n        .appendField('import time');\n      this.setPreviousStatement(true, null);\n      this.setNextStatement(true, null);\n      this.setColour(maincolour);\n      this.setTooltip('Imports the time library.');\n      this.setHelpUrl('');\n    },\n  };\n  \n\n  Blocks['pause_s'] = {\n    init: function () {\n      this.appendDummyInput()\n        .appendField('pause()');\n      this.setPreviousStatement(true, null);\n      this.setNextStatement(true, null);\n      this.setColour(maincolour);\n      this.setTooltip('Pause');\n      this.setHelpUrl('');\n    },\n  };\n\n  Blocks['random'] = {\n    init: function () {\n      this.appendDummyInput()\n        .appendField('import random');\n      this.setPreviousStatement(true, null);\n      this.setNextStatement(true, null);\n      this.setColour(maincolour);\n      this.setTooltip('Imports the random library.');\n      this.setHelpUrl('');\n    },\n  };\n\n//   deprecated\n  Blocks['while_true'] = {\n    init: function () {\n      this.appendDummyInput()\n        .appendField('while True:');\n      this.appendStatementInput('DO')\n        .appendField('');\n      this.setPreviousStatement(true, null);\n      this.setNextStatement(true, null);\n      this.setColour(maincolour);\n      this.setTooltip('Forever loop.');\n      this.setHelpUrl('https://t.co/PCZC5EFe4D');\n    },\n  };\n\n  Blocks['pass'] = {\n    init: function () {\n      this.appendDummyInput()\n        .appendField('pass');\n      this.setPreviousStatement(true, null);\n      this.setNextStatement(true, null);\n      this.setColour(maincolour);\n      this.setTooltip('Pass to the next command');\n      this.setHelpUrl('');\n    },\n  };\n\n//   deprecated\n  Blocks['if'] = {\n    init: function () {\n      this.appendDummyInput()\n        .appendField('if')\n        .appendField(new Blockly.FieldTextInput('0'), 'var')\n        .appendField(':');\n      this.appendStatementInput('DO')\n        .appendField('');\n      this.setPreviousStatement(true, null);\n      this.setNextStatement(true, null);\n      this.setColour(maincolour);\n      this.setTooltip('If Statement.');\n      this.setHelpUrl('');\n    },\n  };\n\n  Blocks['class'] = {\n    init: function () {\n      this.appendDummyInput()\n        .appendField('class')\n      this.appendValueInput(\"class\")\n        .setCheck(null)\n      this.appendDummyInput()\n        .appendField(':');\n      this.appendStatementInput('DO')\n        .appendField('');\n      this.setPreviousStatement(true, null);\n      this.setNextStatement(true, null);\n      this.setColour(maincolour);\n      this.setTooltip('Class Statement.');\n      this.setHelpUrl('');\n    },\n  };\n\n  Blocks['varprint'] = {\n    init: function () {\n      this.appendDummyInput()\n        .appendField('print(')\n      this.appendValueInput('var')\n        .setCheck(null);\n      this.appendDummyInput()\n        .appendField(')');\n      this.setPreviousStatement(true, null);\n      this.setNextStatement(true, null);\n      this.setColour(maincolour);\n      this.setTooltip('Use this to print a variable, a number, or even a string if you put in the quotes yourself.');\n      this.setHelpUrl('');\n    },\n  };\n\n//   deprecated\n  Blocks['ifcroc'] = {\n    init: function () {\n      this.appendDummyInput()\n        .appendField('if')\n        .appendField(new Blockly.FieldTextInput('this'), 'this')\n        .appendField(new Blockly.FieldDropdown([['>', '>'], ['<', '<']]), 'crocsigns')\n        .appendField(new Blockly.FieldTextInput('that'), 'that')\n        .appendField(':');\n      this.appendStatementInput('DO')\n        .setCheck(null);\n      this.setPreviousStatement(true, null);\n      this.setNextStatement(true, null);\n      this.setColour(maincolour);\n      this.setTooltip('If statement with greater and less than');\n      this.setHelpUrl('');\n    },\n  };\n\n  Blocks['varminus'] = {\n    init: function () {\n      this.appendDummyInput()\n        .appendField(new Blockly.FieldTextInput('0'), '1')\n        .appendField('-=')\n        .appendField(new Blockly.FieldTextInput('0'), '2');\n      this.setPreviousStatement(true, null);\n      this.setNextStatement(true, null);\n      this.setColour(maincolour);\n      this.setTooltip('Variable with - and =');\n      this.setHelpUrl('');\n    },\n  };\n\n  Blocks['for'] = {\n    init: function () {\n      this.appendDummyInput()\n        .appendField('for');\n      this.appendValueInput('letter')\n        .setCheck(null);\n      this.appendDummyInput()\n        .appendField('in range(');\n      this.appendValueInput('no')\n        .setCheck(null);\n      this.appendDummyInput()\n        .appendField('):');\n      this.appendStatementInput('DO')\n        .setCheck(null);\n      this.setPreviousStatement(true, null);\n      this.setNextStatement(true, null);\n      this.setColour(maincolour);\n      this.setTooltip('');\n      this.setHelpUrl('Create a for loop');\n    },\n  };\n\n  Blocks['advancedforloops'] = {\n    init: function () {\n      this.appendDummyInput()\n        .appendField('for');\n      this.appendValueInput('x')\n        .setCheck(null);\n      this.appendDummyInput()\n        .appendField('in');\n      this.appendValueInput('y')\n        .setCheck(null);\n      this.appendDummyInput()\n        .appendField(\":\");\n      this.appendStatementInput('DO')\n        .setCheck(null);\n      this.setPreviousStatement(true, null);\n      this.setNextStatement(true, null);\n      this.setColour(maincolour);\n      this.setTooltip('');\n      this.setHelpUrl('');\n    },\n  };\n\n//   deprecated\n  Blocks['ifequals'] = {\n    init: function () {\n      this.appendDummyInput()\n        .appendField('if')\n        .appendField(new Blockly.FieldTextInput('this'), 'this')\n        .appendField('==')\n        .appendField(new Blockly.FieldTextInput('that'), 'that');\n      this.appendStatementInput('DO')\n        .setCheck(null);\n      this.setPreviousStatement(true, null);\n      this.setNextStatement(true, null);\n      this.setColour(maincolour);\n      this.setTooltip('');\n      this.setHelpUrl('');\n    },\n  };\n\n  Blocks['importinputs'] = {\n    init: function () {\n      this.appendDummyInput()\n        .appendField('import inputs');\n      this.setPreviousStatement(true, null);\n      this.setNextStatement(true, null);\n      this.setColour(maincolour);\n      this.setTooltip('');\n      this.setHelpUrl('');\n    },\n  };\n\n  Blocks['return2'] = {\n    init: function () {\n      this.appendDummyInput()\n        .appendField('return');\n      this.appendValueInput('return')\n        .setCheck(null);\n      this.setPreviousStatement(true, null);\n      this.setInputsInline(true);\n      this.setNextStatement(true, null);\n      this.setColour(maincolour);\n      this.setTooltip('');\n      this.setHelpUrl('');\n    },\n  };\n\n//   deprecated\n  Blocks['elif'] = {\n    init: function () {\n      this.appendDummyInput()\n        .appendField('elif')\n        .appendField(new Blockly.FieldTextInput('0'), 'var')\n        .appendField(':');\n      this.appendStatementInput('DO')\n        .appendField('');\n      this.setPreviousStatement(true, null);\n      this.setNextStatement(true, null);\n      this.setColour(maincolour);\n      this.setTooltip('Elif Statement.');\n      this.setHelpUrl('');\n    },\n  };\n\n  Blocks['else'] = {\n    init: function () {\n      this.appendDummyInput()\n        .appendField('else:');\n      this.appendStatementInput('DO')\n        .appendField('');\n      this.setPreviousStatement(true, null);\n      this.setNextStatement(true, null);\n      this.setColour(maincolour);\n      this.setTooltip('Else statement');\n      this.setHelpUrl('');\n    },\n  };\n\n  Blocks['try'] = {\n    init: function () {\n      this.appendDummyInput()\n        .appendField('try:');\n      this.appendStatementInput('DO')\n        .appendField('');\n      this.setPreviousStatement(true, null);\n      this.setNextStatement(true, null);\n      this.setColour(maincolour);\n      this.setTooltip('Else statement');\n      this.setHelpUrl('');\n    },\n  };\n  \n\n  Blocks['df'] = {\n    init: function () {\n      this.appendValueInput(\"def\")\n        .setCheck(null);\n      this.appendDummyInput()\n        .appendField('(');\n      this.appendValueInput(\"params\")\n        .setCheck(null)\n      this.appendDummyInput()\n        .appendField(')');\n      this.setPreviousStatement(true, null);\n      this.setNextStatement(true, null);\n      this.setColour(maincolour);\n      this.setTooltip('call a define function');\n      this.setHelpUrl('');\n    },\n  };\n\n  Blocks['whileout'] = {\n    init: function () {\n      this.appendDummyInput()\n        .appendField('while');\n      this.appendValueInput(\"cond\")\n        .setCheck(\"Boolean\");\n      this.appendDummyInput()\n        .appendField(':');\n      this.appendStatementInput('DO')\n        .appendField('');\n      this.setPreviousStatement(true, null);\n      this.setNextStatement(true, null);\n      this.setColour(maincolour);\n      this.setTooltip('');\n      this.setHelpUrl('');\n    },\n  };\n\n\n\n  Blocks['import_math'] = {\n    init: function () {\n      this.appendDummyInput()\n        .appendField('import math');\n      this.setPreviousStatement(true, null);\n      this.setNextStatement(true, null);\n      this.setColour(maincolour);\n      this.setTooltip('Imports the math library.');\n      this.setHelpUrl('');\n    },\n  };\n\n  \n\n  Blocks['sleep'] = {\n    init: function () {\n      this.appendDummyInput()\n        .appendField('sleep(')\n      this.appendValueInput(\"sleep\")\n      this.appendDummyInput()\n        .appendField(')');\n      this.setPreviousStatement(true, null);\n      this.setNextStatement(true, null);\n      this.setColour(maincolour);\n      this.setTooltip('Sleep');\n      this.setHelpUrl('');\n    },\n  };\n\n  Blocks['sleepnew'] = {\n    init: function() {\n      this.appendDummyInput()\n          .appendField(\"time.sleep(\");\n      this.appendValueInput(\"sleep\")\n          .setCheck(null);\n      this.appendDummyInput()\n          .appendField(\")\");\n      this.setInputsInline(true);\n      this.setPreviousStatement(true, null);\n      this.setNextStatement(true, null);\n      this.setColour(maincolour);\n      this.setTooltip(\"Wait (in milliseconds)\");\n      this.setHelpUrl(\"\");\n    }\n  };\n\n  //deprecated\n\n  Blocks['print'] = {\n    init: function () {\n      this.appendDummyInput()\n        .appendField('print(\"');\n      this.appendValueInput('print')\n        .setCheck(null);\n      this.appendDummyInput()\n        .appendField('\" )');\n      this.setPreviousStatement(true, null);\n      this.setNextStatement(true, null);\n      this.setColour(maincolour);\n      this.setTooltip('Use this to print to the output box.');\n      this.setHelpUrl('');\n    },\n  };\n\n  Blocks['printnew'] = {\n    init: function () {\n      this.appendDummyInput()\n        .appendField('print(\"')\n      this.appendValueInput(\"text\")\n        .setCheck(null);\n      this.appendDummyInput()\n        .appendField('\" )');\n      this.setPreviousStatement(true, null);\n      this.setNextStatement(true, null);\n      this.setColour(maincolour);\n      this.setTooltip('Use this to print a string to the output box.');\n      this.setHelpUrl('');\n    },\n  };\n\n  Blocks['equalsblock'] = {\n    init: function () {\n      this.appendDummyInput()\n        .appendField(new Blockly.FieldTextInput('0'), '1')\n        .appendField('=')\n        .appendField(new Blockly.FieldTextInput('0'), '2');\n      this.setPreviousStatement(true, null);\n      this.setNextStatement(true, null);\n      this.setColour(maincolour);\n      this.setTooltip('');\n      this.setHelpUrl('');\n    },\n  };\n\n  Blocks['equalsblocknew'] = {\n    init: function() {\n      this.appendValueInput(\"text1\")\n          .setCheck(null);\n      this.appendDummyInput()\n      .appendField(new Blockly.FieldDropdown([['=', '='], ['+=', '+='], [\"-=\", \"-=\"]]), 'NAME')\n      this.appendValueInput(\"text2\")\n          .setCheck(null);\n      this.setInputsInline(true);\n      this.setPreviousStatement(true, null);\n      this.setNextStatement(true, null);\n      this.setColour(maincolour);\n      this.setTooltip(\"Assign, increment or decrement a variable\");\n      this.setHelpUrl(\"\");\n      this.setOutput(true, \"Boolean\");\n    }\n  };\n\n  Blocks['define'] = {\n    init: function () {\n      this.appendDummyInput()\n        .appendField('def ');\n      this.appendValueInput('1')\n        .setCheck(null);\n      this.appendDummyInput()\n        .appendField('(');\n      this.appendValueInput('2')\n        .setCheck(null);\n      this.appendDummyInput()\n        .appendField('):');\n      this.appendStatementInput('DO')\n        .setCheck(null);\n      this.setPreviousStatement(true, null);\n      this.setNextStatement(true, null);\n      this.setColour(maincolour);\n      this.setTooltip('');\n      this.setHelpUrl('');\n    },\n  };\n\n//   deprecated\n  Blocks['greater'] = {\n    init: function () {\n      this.appendDummyInput()\n        .appendField('while')\n        .appendField(new Blockly.FieldTextInput(''), '1')\n        .appendField('>')\n        .appendField(new Blockly.FieldTextInput(''), 'v')\n        .appendField(':');\n      this.appendStatementInput('DO')\n        .appendField('');\n      this.setPreviousStatement(true, null);\n      this.setNextStatement(true, null);\n      this.setColour(maincolour);\n      this.setTooltip('');\n      this.setHelpUrl('');\n    },\n  };\n\n  Blocks['ifinline'] = {\n    init: function () {\n      this.appendDummyInput()\n        .appendField('if');\n      this.appendValueInput(\"iftext\")\n        .setCheck(\"Boolean\");\n      this.appendDummyInput()\n        .appendField(':');\n      this.appendStatementInput('ifstate')\n        .setCheck(null);\n      this.setInputsInline(true);\n      this.setPreviousStatement(true, null);\n      this.setNextStatement(true, null);\n      this.setColour(maincolour);\n      this.setTooltip('If block with inline input');\n      this.setHelpUrl('');\n    },\n  };\n\n  Blocks['except'] = {\n    init: function () {\n      this.appendDummyInput()\n        .appendField('except');\n      this.appendValueInput(\"iftext\")\n        .setCheck(\"Boolean\");\n      this.appendDummyInput()\n        .appendField(':');\n      this.appendStatementInput('ifstate')\n        .setCheck(null);\n      this.setInputsInline(true);\n      this.setPreviousStatement(true, null);\n      this.setNextStatement(true, null);\n      this.setColour(maincolour);\n      this.setTooltip('Except');\n      this.setHelpUrl('');\n    },\n  };\n\n  Blocks['with'] = {\n    init: function () {\n      this.appendDummyInput()\n        .appendField('with');\n      this.appendValueInput(\"iftext\")\n        .setCheck(\"null\");\n      this.appendDummyInput()\n        .appendField('as');\n      this.appendValueInput(\"iftext2\")\n        .setCheck(\"null\");\n      this.appendDummyInput()\n        .appendField(':');\n      this.appendStatementInput('ifstate')\n        .setCheck(null);\n      this.setInputsInline(true);\n      this.setPreviousStatement(true, null);\n      this.setNextStatement(true, null);\n      this.setColour(maincolour);\n      this.setTooltip('With block');\n      this.setHelpUrl('');\n    },\n  };\n\n  Blocks['typeanything'] = {\n    init: function() {\n      this.appendValueInput(\"stuff\")\n        .setCheck(null);\n      this.appendDummyInput()   \n          .appendField(\"# your own code\");\n      this.setPreviousStatement(true, null);\n      this.setNextStatement(true, null);\n      this.setColour(maincolour);\n      this.setTooltip(\"Type any python code into this block\");\n      this.setHelpUrl(\"\");\n    }\n  };\n\n  Blocks['elifinline'] = {\n    init: function () {\n      this.appendDummyInput()\n        .appendField('elif');\n      this.appendValueInput('iftext')\n        .setCheck(null)\n      this.appendDummyInput()\n        .appendField(':');\n      this.appendStatementInput('ifstate')\n        .setCheck(null);\n      this.setInputsInline(true);\n      this.setPreviousStatement(true, null);\n      this.setNextStatement(true, null);\n      this.setColour(maincolour);\n      this.setTooltip('ElIf block with inline input');\n      this.setHelpUrl('');\n    },\n  };\n\n  Blocks['buttonapressed'] = {\n    init: function () {\n      this.appendDummyInput()\n        .appendField('button_')\n        .appendField(new Blockly.FieldDropdown([['a', 'a'], ['b', 'b']]), 'NAME')\n        .appendField('.is_pressed()');\n      this.setInputsInline(false);\n      this.setOutput(true, null);\n      this.setColour(maincolour);\n      this.setTooltip('Button A Pressed');\n      this.setHelpUrl('');\n    },\n  };\n\n  Blocks['internal'] = {\n    init: function() {\n        // should you translate to other languages\n        // var rtlOperators = [\n        //     // ['=', 'EQ'],\n        //     // ['\\u2260', 'NEQ'],\n        //     ['\\u200F<\\u200F', 'LT'],\n        //     ['\\u200F\\u2264\\u200F', 'LTE'],\n        //     ['\\u200F>\\u200F', 'GT'],\n        //     ['\\u200F\\u2265\\u200F', 'GTE']\n        //   ];\n          var ltrOperators = [\n            ['==', '=='],\n            ['!=', '!='],\n            ['<', '<'],\n            ['<=', '<='],\n            ['>', '>'],\n            ['>=', '>=']\n          ];\n          var OPERATORS = ltrOperators;\n      this.appendValueInput(\"first\")\n          .setCheck(null);\n      this.appendDummyInput()\n          .appendField(new Blockly.FieldDropdown(OPERATORS), \"choose\")\n      this.appendValueInput(\"last\")\n          .setCheck(null);\n      this.setInputsInline(true);\n      this.setOutput(true, null);\n      this.setOutputShape(Blockly.OUTPUT_SHAPE_ROUND);\n      this.setColour(maincolour);\n      this.setTooltip(\"\");\n      this.setHelpUrl(\"\");\n    }\n  };\n\n  Blocks['textinline'] = {\n    init: function() {\n      this.appendDummyInput()\n        .appendField(new Blockly.FieldTextInput(\"\"), \"text\");\n      this.setInputsInline(true);\n      this.setOutput(true, null);\n      this.setColour(\"#FFFFFF\", \"#FFFFFF\", \"#FFFFFF\");\n      this.setOutputShape(Blockly.OUTPUT_SHAPE_ROUND);\n      this.setTooltip(\"Text input for inline input\");\n      this.setHelpUrl(\"\");\n    }\n  };\n\n  Blocks['stringinline'] = {\n    init: function() {\n      this.appendDummyInput()\n        .appendField(new Blockly.FieldString(\"\"), \"text\");\n      this.setInputsInline(true);\n      this.setOutput(true, null);\n      this.setColour(\"#FFFFFF\", \"#FFFFFF\", \"#FFFFFF\");\n      this.setOutputShape(Blockly.OUTPUT_SHAPE_ROUND);\n      this.setTooltip(\"String input for inline input\");\n      this.setHelpUrl(\"\");\n    }\n};\n\n  Blocks['sliderinline'] = {\n    init: function() {\n      this.appendDummyInput()\n        .appendField(new Blockly.FieldSlider(\"0\", \"0\", \"1\", \"1\", \"1\", \"Value\"), 'slider');\n      this.setInputsInline(true);\n      this.setOutput(true, null);\n      this.setOutputShape(Blockly.OUTPUT_SHAPE_ROUND);\n      this.setColour(\"#FFFFFF\", \"#FFFFFF\", \"#FFFFFF\");\n      this.setTooltip(\"Text input for inline input\");\n      this.setHelpUrl(\"\");\n    }\n  };\n\n  Blocks['varinlines'] = {\n    init: function() {\n      this.appendDummyInput()\n        .appendField(new Blockly.FieldVariable(\"variable\"), \"var\")\n        .appendField(new Blockly.FieldDropdown([['=', '='], ['+=', '+='], [\"-=\", \"-=\"]]), 'NAME')\n      this.appendValueInput(\"value\")\n        .setCheck(null);\n      this.setInputsInline(true);\n      this.setOutputShape(Blockly.OUTPUT_SHAPE_ROUND);\n      this.setPreviousStatement(true, null);\n      this.setNextStatement(true, null);\n      this.setColour(maincolour);\n      this.setTooltip(\"assign a value, increment, or decrement a variable\");\n      this.setHelpUrl(\"\");\n    }\n  };\n\n  Blocks['boolstatus'] = {\n    init: function() {\n      this.appendDummyInput()\n        .appendField(new Blockly.FieldDropdown([\n            [\"True\",\"True\"], \n            [\"False\",\"False\"]\n        ]), \"bool\");\n      this.setOutput(true, \"Boolean\");\n      this.setOutputShape(Blockly.OUTPUT_SHAPE_ROUND);\n      this.setColour(maincolour);\n      this.setTooltip(\"\");\n      this.setHelpUrl(\"\");\n    }\n  };\n\n  \n\n  Blocks['andor'] = {\n    init: function() {\n      this.appendValueInput(\"first\")\n          .setCheck(null);\n      this.appendDummyInput()\n          .appendField(new Blockly.FieldDropdown([[\"and\", \"and\"], [\"or\", \"or\"]]), \"choose\")\n      this.appendValueInput(\"last\")\n          .setCheck(null);\n      this.setInputsInline(true);\n      this.setOutput(true, null);\n      this.setOutputShape(Blockly.OUTPUT_SHAPE_ROUND);\n      this.setColour(maincolour);\n      this.setTooltip(\"\");\n      this.setHelpUrl(\"\");\n    }\n  };\n\n  Blocks['not'] = {\n    init: function () {\n      this.appendDummyInput()\n        .appendField('not');\n      this.appendValueInput(\"bool\")\n        .setCheck(null);\n      this.setInputsInline(true);\n      this.setOutput(true, null);\n      this.setColour(maincolour);\n      this.setOutputShape(Blockly.OUTPUT_SHAPE_ROUND);\n      this.setTooltip('negates a Boolean value');\n      this.setHelpUrl('');\n    },\n  };\n\n  Blocks['break'] = {\n    init: function () {\n      this.appendDummyInput()\n        .appendField('break');\n      this.setPreviousStatement(true, null);\n      this.setNextStatement(true, null);\n      this.setColour(maincolour);\n      this.setTooltip('breaks out of a loop');\n      this.setHelpUrl('');\n    },\n  };\n\n  Blocks['variables_get'] = {\n    init: function() {\n      this.appendDummyInput()\n          .appendField(new Blockly.FieldVariable(\"var\"), \"VAR\");\n      this.setOutput(true, null);\n      this.setColour(\"#ff0066\");\n      this.setOutputShape(Blockly.OUTPUT_SHAPE_ROUND);\n   this.setTooltip(\"\");\n   this.setHelpUrl(\"\");\n    }\n  };\n\n  Blocks['variables_set'] = {\n    init: function() {\n      this.appendDummyInput()\n          .appendField(new Blockly.FieldVariable(\"var\"), \"VAR\")\n          .appendField(\" = \");\n      this.appendValueInput(\"varset\")\n          .setCheck(null);\n      this.setInputsInline(true);\n      this.setPreviousStatement(true, null);\n      this.setNextStatement(true, null);\n      this.setColour(\"#ff0066\");\n   this.setTooltip(\"\");\n   this.setHelpUrl(\"\");\n    }\n  };\n}\n\n"],"sourceRoot":""}