{"version":3,"sources":["webpack:///./src/blocks/circuitpython/pwm/generators.ts"],"names":["define","Python","block","code","variable_pwm","Blockly","variableDB_","getName","getFieldValue","Variables","NAME_TYPE","text_pin","valueToCode","ORDER_ATOMIC","text_dc","text_fr","variable_pin","text_pinno","text_direction"],"mappings":"gHAAc,SAAUA,EAAOC,GAG7BA,EAAO,kBAAoB,SAAUC,GACnC,MAAMC,EAAO,0BACb,OAAOA,GAGTF,EAAO,mBAAqB,SAAUC,GACpC,MAAMC,EAAO,2BACb,OAAOA,GAGTF,EAAO,YAAc,SAASC,GAC5B,IAAIE,EAAeC,QAAQJ,OAAOK,YAAYC,QAAQL,EAAMM,cAAc,OAAQH,QAAQI,UAAUC,WAChGC,EAAWN,QAAQJ,OAAOW,YAAYV,EAAO,QAASG,QAAQJ,OAAOY,eAC1E,GACCC,EAAUT,QAAQJ,OAAOW,YAAYV,EAAO,QAASG,QAAQJ,OAAOY,eACrE,GACCE,EAAUV,QAAQJ,OAAOW,YAAYV,EAAO,QAASG,QAAQJ,OAAOY,eACrE,GAEKV,EAAOC,EAAc,qBAAsBO,EAAU,gBAAiBG,EAAS,eAAgBC,EAAS,MAC5G,OAAOZ,GAGTF,EAAO,aAAe,SAASC,GAC7B,IAAIc,EAAeX,QAAQJ,OAAOK,YAAYC,QAAQL,EAAMM,cAAc,OAAQH,QAAQI,UAAUC,WAChGO,EAAaZ,QAAQJ,OAAOW,YAAYV,EAAO,OAAQG,QAAQJ,OAAOY,eAC3E,GAEKV,EAAOa,EAAc,mBAAoBC,EAAY,MACzD,OAAOd,GAGTF,EAAO,eAAiB,SAASC,GAC/B,IAAIe,EAAaZ,QAAQJ,OAAOW,YAAYV,EAAO,OAAQG,QAAQJ,OAAOY,eAC3E,GAEKV,EAAO,iBAAkBc,EAAY,MACzC,OAAOd,GAGTF,EAAO,UAAY,SAASC,GAC1B,IAAIc,EAAeX,QAAQJ,OAAOK,YAAYC,QAAQL,EAAMM,cAAc,OAAQH,QAAQI,UAAUC,WAChGQ,EAAiBb,QAAQJ,OAAOW,YAAYV,EAAO,OAAQG,QAAQJ,OAAOY,eAC/E,GAEKV,EAAOa,EAAc,iBAAkBE,EAAgB,KAC3D,OAAOf,GAGTF,EAAO,YAAc,SAASC,GAC5B,IAAIc,EAAeX,QAAQJ,OAAOK,YAAYC,QAAQL,EAAMM,cAAc,OAAQH,QAAQI,UAAUC,WAChGQ,EAAiBb,QAAQJ,OAAOW,YAAYV,EAAO,OAAQG,QAAQJ,OAAOY,eAC/E,GAEKV,EAAOa,EAAc,gBAAiBE,EAAgB,KAC1D,OAAOf,GA1DX","file":"js/chunk-2d217755.37bab80d.js","sourcesContent":["export default function define(Python: Blockly.BlockGenerators) {\n\n\n  Python['import_pulseio'] = function (block) {\n    const code = 'from pulseio import *\\n';\n    return code;\n  };\n\n  Python['import_simpleio'] = function (block) {\n    const code = 'from simpleio import *\\n';\n    return code;\n  };\n\n  Python['pwm_conf'] = function(block) {\n    var variable_pwm = Blockly.Python.variableDB_.getName(block.getFieldValue('pwm'), Blockly.Variables.NAME_TYPE);\n    var text_pin = Blockly.Python.valueToCode(block, 'text1', Blockly.Python.ORDER_ATOMIC)\n|| '';\nvar text_dc = Blockly.Python.valueToCode(block, 'text2', Blockly.Python.ORDER_ATOMIC)\n|| '';\nvar text_fr = Blockly.Python.valueToCode(block, 'text3', Blockly.Python.ORDER_ATOMIC)\n|| '';\n    // TODO: Assemble Python into code variable.\n    var code = variable_pwm+ ' = pulseio.PWMOut(' +text_pin+ ', duty_cycle=' +text_dc+ ', frequency=' +text_fr+ ')\\n';\n    return code;\n  };\n\n  Python['pwm_conf2'] = function(block) {\n    var variable_pin = Blockly.Python.variableDB_.getName(block.getFieldValue('pin'), Blockly.Variables.NAME_TYPE);\n    var text_pinno = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC)\n|| '';\n    // TODO: Assemble Python into code variable.\n    var code = variable_pin+ ' = DigitalInOut(' +text_pinno+ ')\\n';\n    return code;\n  };\n  \n  Python['simple_tone'] = function(block) {\n    var text_pinno = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC)\n|| '';\n    // TODO: Assemble Python into code variable.\n    var code = 'simpleio.tone(' +text_pinno+ ')\\n';\n    return code;\n  };\n\n  Python['pwm_dc'] = function(block) {\n    var variable_pin = Blockly.Python.variableDB_.getName(block.getFieldValue('pin'), Blockly.Variables.NAME_TYPE);\n    var text_direction = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC)\n|| '';\n    // TODO: Assemble Python into code variable.\n    var code = variable_pin+ '.duty_cycle = ' +text_direction+ '\\n';\n    return code;\n  };\n\n  Python['pwm_freq'] = function(block) {\n    var variable_pin = Blockly.Python.variableDB_.getName(block.getFieldValue('pin'), Blockly.Variables.NAME_TYPE);\n    var text_direction = Blockly.Python.valueToCode(block, 'text', Blockly.Python.ORDER_ATOMIC)\n|| '';\n    // TODO: Assemble Python into code variable.\n    var code = variable_pin+ '.frequency = ' +text_direction+ '\\n';\n    return code;\n  };\n\n\n}\n"],"sourceRoot":""}